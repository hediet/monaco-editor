import*as dom from"./dom.js";import{DisposableStore,toDisposable}from"../common/lifecycle.js";export class GlobalPointerMoveMonitor{constructor(){this._hooks=new DisposableStore,this._pointerMoveCallback=null,this._onStopCallback=null}dispose(){this.stopMonitoring(!1),this._hooks.dispose()}stopMonitoring(o,t){if(!this.isMonitoring())return;this._hooks.clear(),this._pointerMoveCallback=null;const i=this._onStopCallback;this._onStopCallback=null,o&&i&&i(t)}isMonitoring(){return!!this._pointerMoveCallback}startMonitoring(o,t,i,s,e){this.isMonitoring()&&this.stopMonitoring(!1),this._pointerMoveCallback=s,this._onStopCallback=e;let n=o;try{o.setPointerCapture(t),this._hooks.add(toDisposable((()=>{try{o.releasePointerCapture(t)}catch(o){}})))}catch(o){n=window}this._hooks.add(dom.addDisposableListener(n,dom.EventType.POINTER_MOVE,(o=>{o.buttons===i?(o.preventDefault(),this._pointerMoveCallback(o)):this.stopMonitoring(!0)}))),this._hooks.add(dom.addDisposableListener(n,dom.EventType.POINTER_UP,(o=>this.stopMonitoring(!0))))}}