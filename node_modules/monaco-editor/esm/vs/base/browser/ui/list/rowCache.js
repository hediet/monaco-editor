import{$}from"../../dom.js";function removeFromParent(e){var t;try{null===(t=e.parentElement)||void 0===t||t.removeChild(e)}catch(e){}}export class RowCache{constructor(e){this.renderers=e,this.cache=new Map,this.transactionNodesPendingRemoval=new Set,this.inTransaction=!1}alloc(e){let t=this.getTemplateCache(e).pop(),o=!1;if(t)o=this.transactionNodesPendingRemoval.has(t.domNode),o&&this.transactionNodesPendingRemoval.delete(t.domNode);else{const o=$(".monaco-list-row");t={domNode:o,templateId:e,templateData:this.getRenderer(e).renderTemplate(o)}}return{row:t,isReusingConnectedDomNode:o}}release(e){e&&this.releaseRow(e)}transact(e){if(this.inTransaction)throw new Error("Already in transaction");this.inTransaction=!0;try{e()}finally{for(const e of this.transactionNodesPendingRemoval)this.doRemoveNode(e);this.transactionNodesPendingRemoval.clear(),this.inTransaction=!1}}releaseRow(e){const{domNode:t,templateId:o}=e;t&&(this.inTransaction?this.transactionNodesPendingRemoval.add(t):this.doRemoveNode(t)),this.getTemplateCache(o).push(e)}doRemoveNode(e){e.classList.remove("scrolling"),removeFromParent(e)}getTemplateCache(e){let t=this.cache.get(e);return t||(t=[],this.cache.set(e,t)),t}dispose(){this.cache.forEach(((e,t)=>{for(const o of e)this.getRenderer(t).disposeTemplate(o.templateData),o.templateData=null})),this.cache.clear(),this.transactionNodesPendingRemoval.clear()}getRenderer(e){const t=this.renderers.get(e);if(!t)throw new Error(`No renderer found for ${e}`);return t}}