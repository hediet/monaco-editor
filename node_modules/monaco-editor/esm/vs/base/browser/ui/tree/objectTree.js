var __decorate=this&&this.__decorate||function(e,r,t,o){var s,d=arguments.length,i=d<3?r:null===o?o=Object.getOwnPropertyDescriptor(r,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,r,t,o);else for(var n=e.length-1;n>=0;n--)(s=e[n])&&(i=(d<3?s(i):d>3?s(r,t,i):s(r,t))||i);return d>3&&i&&Object.defineProperty(r,t,i),i};import{AbstractTree}from"./abstractTree.js";import{CompressibleObjectTreeModel}from"./compressedObjectTreeModel.js";import{ObjectTreeModel}from"./objectTreeModel.js";import{memoize}from"../../../common/decorators.js";import{Iterable}from"../../../common/iterator.js";export class ObjectTree extends AbstractTree{get onDidChangeCollapseState(){return this.model.onDidChangeCollapseState}constructor(e,r,t,o,s={}){super(e,r,t,o,s),this.user=e}setChildren(e,r=Iterable.empty(),t){this.model.setChildren(e,r,t)}rerender(e){void 0!==e?this.model.rerender(e):this.view.rerender()}hasElement(e){return this.model.has(e)}createModel(e,r,t){return new ObjectTreeModel(e,r,t)}}class CompressibleRenderer{get compressedTreeNodeProvider(){return this._compressedTreeNodeProvider()}constructor(e,r){this._compressedTreeNodeProvider=e,this.renderer=r,this.templateId=r.templateId,r.onDidChangeTwistieState&&(this.onDidChangeTwistieState=r.onDidChangeTwistieState)}renderTemplate(e){return{compressedTreeNode:void 0,data:this.renderer.renderTemplate(e)}}renderElement(e,r,t,o){const s=this.compressedTreeNodeProvider.getCompressedTreeNode(e.element);1===s.element.elements.length?(t.compressedTreeNode=void 0,this.renderer.renderElement(e,r,t.data,o)):(t.compressedTreeNode=s,this.renderer.renderCompressedElements(s,r,t.data,o))}disposeElement(e,r,t,o){var s,d,i,n;t.compressedTreeNode?null===(d=(s=this.renderer).disposeCompressedElements)||void 0===d||d.call(s,t.compressedTreeNode,r,t.data,o):null===(n=(i=this.renderer).disposeElement)||void 0===n||n.call(i,e,r,t.data,o)}disposeTemplate(e){this.renderer.disposeTemplate(e.data)}renderTwistie(e,r){return!!this.renderer.renderTwistie&&this.renderer.renderTwistie(e,r)}}function asObjectTreeOptions(e,r){return r&&Object.assign(Object.assign({},r),{keyboardNavigationLabelProvider:r.keyboardNavigationLabelProvider&&{getKeyboardNavigationLabel(t){let o;try{o=e().getCompressedTreeNode(t)}catch(e){return r.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(t)}return 1===o.element.elements.length?r.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(t):r.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(o.element.elements)}}})}__decorate([memoize],CompressibleRenderer.prototype,"compressedTreeNodeProvider",null);export class CompressibleObjectTree extends ObjectTree{constructor(e,r,t,o,s={}){const d=()=>this;super(e,r,t,o.map((e=>new CompressibleRenderer(d,e))),asObjectTreeOptions(d,s))}setChildren(e,r=Iterable.empty(),t){this.model.setChildren(e,r,t)}createModel(e,r,t){return new CompressibleObjectTreeModel(e,r,t)}updateOptions(e={}){super.updateOptions(e),void 0!==e.compressionEnabled&&this.model.setCompressionEnabled(e.compressionEnabled)}getCompressedTreeNode(e=null){return this.model.getCompressedTreeNode(e)}}