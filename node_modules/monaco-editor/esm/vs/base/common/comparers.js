import{Lazy}from"./lazy.js";const intlFileNameCollatorBaseNumeric=new Lazy((()=>{const e=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"});return{collator:e,collatorIsNumeric:e.resolvedOptions().numeric}})),intlFileNameCollatorNumeric=new Lazy((()=>({collator:new Intl.Collator(void 0,{numeric:!0})}))),intlFileNameCollatorNumericCaseInsensitive=new Lazy((()=>({collator:new Intl.Collator(void 0,{numeric:!0,sensitivity:"accent"})})));export function compareFileNames(e,t,o=!1){const r=e||"",n=t||"",l=intlFileNameCollatorBaseNumeric.value.collator.compare(r,n);return intlFileNameCollatorBaseNumeric.value.collatorIsNumeric&&0===l&&r!==n?r<n?-1:1:l}export function compareAnything(e,t,o){const r=e.toLowerCase(),n=t.toLowerCase(),l=compareByPrefix(e,t,o);if(l)return l;const i=r.endsWith(o);if(i!==n.endsWith(o))return i?-1:1;const a=compareFileNames(r,n);return 0!==a?a:r.localeCompare(n)}export function compareByPrefix(e,t,o){const r=e.toLowerCase(),n=t.toLowerCase(),l=r.startsWith(o),i=n.startsWith(o);if(l!==i)return l?-1:1;if(l&&i){if(r.length<n.length)return-1;if(r.length>n.length)return 1}return 0}