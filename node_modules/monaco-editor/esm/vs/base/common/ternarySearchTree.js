import{compare,compareIgnoreCase,compareSubstring,compareSubstringIgnoreCase}from"./strings.js";export class StringIterator{constructor(){this._value="",this._pos=0}reset(t){return this._value=t,this._pos=0,this}next(){return this._pos+=1,this}hasNext(){return this._pos<this._value.length-1}cmp(t){return t.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}}export class ConfigKeysIterator{constructor(t=!0){this._caseSensitive=t}reset(t){return this._value=t,this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}next(){this._from=this._to;let t=!0;for(;this._to<this._value.length;this._to++)if(46===this._value.charCodeAt(this._to)){if(!t)break;this._from++}else t=!1;return this}cmp(t){return this._caseSensitive?compareSubstring(t,this._value,0,t.length,this._from,this._to):compareSubstringIgnoreCase(t,this._value,0,t.length,this._from,this._to)}value(){return this._value.substring(this._from,this._to)}}export class PathIterator{constructor(t=!0,e=!0){this._splitOnBackslash=t,this._caseSensitive=e}reset(t){this._from=0,this._to=0,this._value=t,this._valueLen=t.length;for(let e=t.length-1;e>=0;e--,this._valueLen--){const t=this._value.charCodeAt(e);if(!(47===t||this._splitOnBackslash&&92===t))break}return this.next()}hasNext(){return this._to<this._valueLen}next(){this._from=this._to;let t=!0;for(;this._to<this._valueLen;this._to++){const e=this._value.charCodeAt(this._to);if(47===e||this._splitOnBackslash&&92===e){if(!t)break;this._from++}else t=!1}return this}cmp(t){return this._caseSensitive?compareSubstring(t,this._value,0,t.length,this._from,this._to):compareSubstringIgnoreCase(t,this._value,0,t.length,this._from,this._to)}value(){return this._value.substring(this._from,this._to)}}export class UriIterator{constructor(t,e){this._ignorePathCasing=t,this._ignoreQueryAndFragment=e,this._states=[],this._stateIdx=0}reset(t){return this._value=t,this._states=[],this._value.scheme&&this._states.push(1),this._value.authority&&this._states.push(2),this._value.path&&(this._pathIterator=new PathIterator(!1,!this._ignorePathCasing(t)),this._pathIterator.reset(t.path),this._pathIterator.value()&&this._states.push(3)),this._ignoreQueryAndFragment(t)||(this._value.query&&this._states.push(4),this._value.fragment&&this._states.push(5)),this._stateIdx=0,this}next(){return 3===this._states[this._stateIdx]&&this._pathIterator.hasNext()?this._pathIterator.next():this._stateIdx+=1,this}hasNext(){return 3===this._states[this._stateIdx]&&this._pathIterator.hasNext()||this._stateIdx<this._states.length-1}cmp(t){if(1===this._states[this._stateIdx])return compareIgnoreCase(t,this._value.scheme);if(2===this._states[this._stateIdx])return compareIgnoreCase(t,this._value.authority);if(3===this._states[this._stateIdx])return this._pathIterator.cmp(t);if(4===this._states[this._stateIdx])return compare(t,this._value.query);if(5===this._states[this._stateIdx])return compare(t,this._value.fragment);throw new Error}value(){if(1===this._states[this._stateIdx])return this._value.scheme;if(2===this._states[this._stateIdx])return this._value.authority;if(3===this._states[this._stateIdx])return this._pathIterator.value();if(4===this._states[this._stateIdx])return this._value.query;if(5===this._states[this._stateIdx])return this._value.fragment;throw new Error}}class TernarySearchTreeNode{constructor(){this.height=1}rotateLeft(){const t=this.right;return this.right=t.left,t.left=this,this.updateHeight(),t.updateHeight(),t}rotateRight(){const t=this.left;return this.left=t.right,t.right=this,this.updateHeight(),t.updateHeight(),t}updateHeight(){this.height=1+Math.max(this.heightLeft,this.heightRight)}balanceFactor(){return this.heightRight-this.heightLeft}get heightLeft(){var t,e;return null!==(e=null===(t=this.left)||void 0===t?void 0:t.height)&&void 0!==e?e:0}get heightRight(){var t,e;return null!==(e=null===(t=this.right)||void 0===t?void 0:t.height)&&void 0!==e?e:0}}export class TernarySearchTree{static forUris(t=(()=>!1),e=(()=>!1)){return new TernarySearchTree(new UriIterator(t,e))}static forStrings(){return new TernarySearchTree(new StringIterator)}static forConfigKeys(){return new TernarySearchTree(new ConfigKeysIterator)}constructor(t){this._iter=t}clear(){this._root=void 0}set(t,e){const s=this._iter.reset(t);let r;this._root||(this._root=new TernarySearchTreeNode,this._root.segment=s.value());const i=[];for(r=this._root;;){const t=s.cmp(r.segment);if(t>0)r.left||(r.left=new TernarySearchTreeNode,r.left.segment=s.value()),i.push([-1,r]),r=r.left;else if(t<0)r.right||(r.right=new TernarySearchTreeNode,r.right.segment=s.value()),i.push([1,r]),r=r.right;else{if(!s.hasNext())break;s.next(),r.mid||(r.mid=new TernarySearchTreeNode,r.mid.segment=s.value()),i.push([0,r]),r=r.mid}}const h=r.value;r.value=e,r.key=t;for(let t=i.length-1;t>=0;t--){const e=i[t][1];e.updateHeight();const s=e.balanceFactor();if(s<-1||s>1){const s=i[t][0],r=i[t+1][0];if(1===s&&1===r)i[t][1]=e.rotateLeft();else if(-1===s&&-1===r)i[t][1]=e.rotateRight();else if(1===s&&-1===r)e.right=i[t+1][1]=i[t+1][1].rotateRight(),i[t][1]=e.rotateLeft();else{if(-1!==s||1!==r)throw new Error;e.left=i[t+1][1]=i[t+1][1].rotateLeft(),i[t][1]=e.rotateRight()}if(t>0)switch(i[t-1][0]){case-1:i[t-1][1].left=i[t][1];break;case 1:i[t-1][1].right=i[t][1];break;case 0:i[t-1][1].mid=i[t][1]}else this._root=i[0][1]}}return h}get(t){var e;return null===(e=this._getNode(t))||void 0===e?void 0:e.value}_getNode(t){const e=this._iter.reset(t);let s=this._root;for(;s;){const t=e.cmp(s.segment);if(t>0)s=s.left;else if(t<0)s=s.right;else{if(!e.hasNext())break;e.next(),s=s.mid}}return s}has(t){const e=this._getNode(t);return!(void 0===(null==e?void 0:e.value)&&void 0===(null==e?void 0:e.mid))}delete(t){return this._delete(t,!1)}deleteSuperstr(t){return this._delete(t,!0)}_delete(t,e){var s;const r=this._iter.reset(t),i=[];let h=this._root;for(;h;){const t=r.cmp(h.segment);if(t>0)i.push([-1,h]),h=h.left;else if(t<0)i.push([1,h]),h=h.right;else{if(!r.hasNext())break;r.next(),i.push([0,h]),h=h.mid}}if(h){if(e?(h.left=void 0,h.mid=void 0,h.right=void 0,h.height=1):(h.key=void 0,h.value=void 0),!h.mid&&!h.value)if(h.left&&h.right){const t=this._min(h.right);if(t.key){const{key:e,value:s,segment:r}=t;this._delete(t.key,!1),h.key=e,h.value=s,h.segment=r}}else{const t=null!==(s=h.left)&&void 0!==s?s:h.right;if(i.length>0){const[e,s]=i[i.length-1];switch(e){case-1:s.left=t;break;case 0:s.mid=t;break;case 1:s.right=t}}else this._root=t}for(let t=i.length-1;t>=0;t--){const e=i[t][1];e.updateHeight();const s=e.balanceFactor();if(s>1?(e.right.balanceFactor()>=0||(e.right=e.right.rotateRight()),i[t][1]=e.rotateLeft()):s<-1&&(e.left.balanceFactor()<=0||(e.left=e.left.rotateLeft()),i[t][1]=e.rotateRight()),t>0)switch(i[t-1][0]){case-1:i[t-1][1].left=i[t][1];break;case 1:i[t-1][1].right=i[t][1];break;case 0:i[t-1][1].mid=i[t][1]}else this._root=i[0][1]}}}_min(t){for(;t.left;)t=t.left;return t}findSubstr(t){const e=this._iter.reset(t);let s,r=this._root;for(;r;){const t=e.cmp(r.segment);if(t>0)r=r.left;else if(t<0)r=r.right;else{if(!e.hasNext())break;e.next(),s=r.value||s,r=r.mid}}return r&&r.value||s}findSuperstr(t){return this._findSuperstrOrElement(t,!1)}_findSuperstrOrElement(t,e){const s=this._iter.reset(t);let r=this._root;for(;r;){const t=s.cmp(r.segment);if(t>0)r=r.left;else if(t<0)r=r.right;else{if(!s.hasNext())return r.mid?this._entries(r.mid):e?r.value:void 0;s.next(),r=r.mid}}}forEach(t){for(const[e,s]of this)t(s,e)}*[Symbol.iterator](){yield*this._entries(this._root)}_entries(t){const e=[];return this._dfsEntries(t,e),e[Symbol.iterator]()}_dfsEntries(t,e){t&&(t.left&&this._dfsEntries(t.left,e),t.value&&e.push([t.key,t.value]),t.mid&&this._dfsEntries(t.mid,e),t.right&&this._dfsEntries(t.right,e))}}