var __awaiter=this&&this.__awaiter||function(t,e,i,r){return new(i||(i=Promise))((function(n,s){function a(t){try{u(r.next(t))}catch(t){s(t)}}function o(t){try{u(r.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,o)}u((r=r.apply(t,e||[])).next())}))};import{distinct}from"./arrays.js";import{generateUuid}from"./uuid.js";export function createStringDataTransferItem(t){return{id:generateUuid(),asString:()=>__awaiter(this,void 0,void 0,(function*(){return t})),asFile:()=>{},value:"string"==typeof t?t:void 0}}export function createFileDataTransferItem(t,e,i){return{id:generateUuid(),asString:()=>__awaiter(this,void 0,void 0,(function*(){return""})),asFile:()=>({name:t,uri:e,data:i}),value:void 0}}export class VSDataTransfer{constructor(){this._entries=new Map}get size(){return this._entries.size}has(t){return this._entries.has(this.toKey(t))}get(t){var e;return null===(e=this._entries.get(this.toKey(t)))||void 0===e?void 0:e[0]}append(t,e){const i=this._entries.get(t);i?i.push(e):this._entries.set(this.toKey(t),[e])}replace(t,e){this._entries.set(this.toKey(t),[e])}delete(t){this._entries.delete(this.toKey(t))}*entries(){for(const[t,e]of this._entries.entries())for(const i of e)yield[t,i]}values(){return Array.from(this._entries.values()).flat()}forEach(t){for(const[e,i]of this.entries())t(i,e)}toKey(t){return t.toLowerCase()}}export const UriList=Object.freeze({create:t=>distinct(t.map((t=>t.toString()))).join("\r\n"),split:t=>t.split("\r\n"),parse:t=>UriList.split(t).filter((t=>!t.startsWith("#")))});