export function isString(t){return"string"==typeof t}export function isObject(t){return!("object"!=typeof t||null===t||Array.isArray(t)||t instanceof RegExp||t instanceof Date)}export function isTypedArray(t){const n=Object.getPrototypeOf(Uint8Array);return"object"==typeof t&&t instanceof n}export function isNumber(t){return"number"==typeof t&&!isNaN(t)}export function isIterable(t){return!!t&&"function"==typeof t[Symbol.iterator]}export function isBoolean(t){return!0===t||!1===t}export function isUndefined(t){return void 0===t}export function isDefined(t){return!isUndefinedOrNull(t)}export function isUndefinedOrNull(t){return isUndefined(t)||null===t}export function assertType(t,n){if(!t)throw new Error(n?`Unexpected type, expected '${n}'`:"Unexpected type")}export function assertIsDefined(t){if(isUndefinedOrNull(t))throw new Error("Assertion Failed: argument is undefined or null");return t}export function isFunction(t){return"function"==typeof t}export function validateConstraints(t,n){const e=Math.min(t.length,n.length);for(let r=0;r<e;r++)validateConstraint(t[r],n[r])}export function validateConstraint(t,n){if(isString(n)){if(typeof t!==n)throw new Error(`argument does not match constraint: typeof ${n}`)}else if(isFunction(n)){try{if(t instanceof n)return}catch(t){}if(!isUndefinedOrNull(t)&&t.constructor===n)return;if(1===n.length&&!0===n.call(void 0,t))return;throw new Error("argument does not match one of these constraints: arg instanceof constraint, arg.constructor === constraint, nor constraint(arg) === true")}}export function withNullAsUndefined(t){return null===t?void 0:t}