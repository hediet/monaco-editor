export class ErrorHandler{constructor(){this.listeners=[],this.unexpectedErrorHandler=function(r){setTimeout((()=>{if(r.stack){if(ErrorNoTelemetry.isErrorNoTelemetry(r))throw new ErrorNoTelemetry(r.message+"\n\n"+r.stack);throw new Error(r.message+"\n\n"+r.stack)}throw r}),0)}}emit(r){this.listeners.forEach((e=>{e(r)}))}onUnexpectedError(r){this.unexpectedErrorHandler(r),this.emit(r)}onUnexpectedExternalError(r){this.unexpectedErrorHandler(r)}}export const errorHandler=new ErrorHandler;export function onUnexpectedError(r){isCancellationError(r)||errorHandler.onUnexpectedError(r)}export function onUnexpectedExternalError(r){isCancellationError(r)||errorHandler.onUnexpectedExternalError(r)}export function transformErrorForSerialization(r){if(r instanceof Error){const{name:e,message:t}=r;return{$isError:!0,name:e,message:t,stack:r.stacktrace||r.stack,noTelemetry:ErrorNoTelemetry.isErrorNoTelemetry(r)}}return r}const canceledName="Canceled";export function isCancellationError(r){return r instanceof CancellationError||r instanceof Error&&"Canceled"===r.name&&"Canceled"===r.message}export class CancellationError extends Error{constructor(){super("Canceled"),this.name=this.message}}export function canceled(){const r=new Error("Canceled");return r.name=r.message,r}export function illegalArgument(r){return r?new Error(`Illegal argument: ${r}`):new Error("Illegal argument")}export function illegalState(r){return r?new Error(`Illegal state: ${r}`):new Error("Illegal state")}export class NotSupportedError extends Error{constructor(r){super("NotSupported"),r&&(this.message=r)}}export class ErrorNoTelemetry extends Error{constructor(r){super(r),this.name="CodeExpectedError"}static fromError(r){if(r instanceof ErrorNoTelemetry)return r;const e=new ErrorNoTelemetry;return e.message=r.message,e.stack=r.stack,e}static isErrorNoTelemetry(r){return"CodeExpectedError"===r.name}}export class BugIndicatingError extends Error{constructor(r){super(r||"An unexpected bug occurred."),Object.setPrototypeOf(this,BugIndicatingError.prototype)}}