import{SequenceDiff,OffsetRange}from"./diffAlgorithm.js";export class MyersDiffAlgorithm{compute(e,t){if(0===e.length)return[new SequenceDiff(new OffsetRange(0,0),new OffsetRange(0,t.length))];if(0===t.length)return[new SequenceDiff(new OffsetRange(0,e.length),new OffsetRange(0,0))];function n(n,r){for(;n<e.length&&r<t.length&&e.getElement(n)===t.getElement(r);)n++,r++;return n}let r=0;const s=new FastInt32Array;s.set(0,n(0,0));const i=new FastArrayNegativeIndices;i.set(0,0===s.get(0)?null:new SnakePath(null,0,0,s.get(0)));let g=0;e:for(;;)for(r++,g=-r;g<=r;g+=2){const h=g===r?-1:s.get(g+1),a=g===-r?-1:s.get(g-1)+1,f=Math.min(Math.max(h,a),e.length),l=f-g,o=n(f,l);s.set(g,o);const A=f===h?i.get(g+1):i.get(g-1);if(i.set(g,o!==f?new SnakePath(A,f,l,o-f):A),s.get(g)===e.length&&s.get(g)-g===t.length)break e}let h=i.get(g);const a=[];let f=e.length,l=t.length;for(;;){const e=h?h.x+h.length:0,t=h?h.y+h.length:0;if(e===f&&t===l||a.push(new SequenceDiff(new OffsetRange(e,f),new OffsetRange(t,l))),!h)break;f=h.x,l=h.y,h=h.prev}return a.reverse(),a}}class SnakePath{constructor(e,t,n,r){this.prev=e,this.x=t,this.y=n,this.length=r}}class FastInt32Array{constructor(){this.positiveArr=new Int32Array(10),this.negativeArr=new Int32Array(10)}get(e){return e<0?(e=-e-1,this.negativeArr[e]):this.positiveArr[e]}set(e,t){if(e<0){if((e=-e-1)>=this.negativeArr.length){const e=this.negativeArr;this.negativeArr=new Int32Array(2*e.length),this.negativeArr.set(e)}this.negativeArr[e]=t}else{if(e>=this.positiveArr.length){const e=this.positiveArr;this.positiveArr=new Int32Array(2*e.length),this.positiveArr.set(e)}this.positiveArr[e]=t}}}class FastArrayNegativeIndices{constructor(){this.positiveArr=[],this.negativeArr=[]}get(e){return e<0?(e=-e-1,this.negativeArr[e]):this.positiveArr[e]}set(e,t){e<0?(e=-e-1,this.negativeArr[e]=t):this.positiveArr[e]=t}}