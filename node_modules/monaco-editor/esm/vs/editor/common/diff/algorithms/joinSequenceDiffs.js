import{OffsetRange,SequenceDiff}from"./diffAlgorithm.js";export function optimizeSequenceDiffs(e,n,t){let s=t;return s=joinSequenceDiffs(e,n,s),s=shiftSequenceDiffs(e,n,s),s}export function smoothenSequenceDiffs(e,n,t){const s=[];for(const e of t){const n=s[s.length-1];n&&(e.seq1Range.start-n.seq1Range.endExclusive<=2||e.seq2Range.start-n.seq2Range.endExclusive<=2)?s[s.length-1]=new SequenceDiff(n.seq1Range.join(e.seq1Range),n.seq2Range.join(e.seq2Range)):s.push(e)}return s}export function joinSequenceDiffs(e,n,t){const s=[];t.length>0&&s.push(t[0]);for(let e=1;e<t.length;e++){const i=s[s.length-1],r=t[e];if(r.seq1Range.isEmpty){let e=!0;const t=r.seq1Range.start-i.seq1Range.endExclusive;for(let s=1;s<=t;s++)if(n.getElement(r.seq2Range.start-s)!==n.getElement(r.seq2Range.endExclusive-s)){e=!1;break}if(e){s[s.length-1]=new SequenceDiff(i.seq1Range,new OffsetRange(i.seq2Range.start,r.seq2Range.endExclusive-t));continue}}s.push(r)}return s}export function shiftSequenceDiffs(e,n,t){if(!e.getBoundaryScore||!n.getBoundaryScore)return t;for(let s=0;s<t.length;s++){const i=t[s];if(i.seq1Range.isEmpty){const r=s>0?t[s-1].seq2Range.endExclusive:-1,f=s+1<t.length?t[s+1].seq2Range.start:n.length;t[s]=shiftDiffToBetterPosition(i,e,n,f,r)}else if(i.seq2Range.isEmpty){const r=s>0?t[s-1].seq1Range.endExclusive:-1,f=s+1<t.length?t[s+1].seq1Range.start:e.length;t[s]=shiftDiffToBetterPosition(i.reverse(),n,e,f,r).reverse()}}return t}function shiftDiffToBetterPosition(e,n,t,s,i){let r=1;for(;e.seq2Range.start-r>i&&t.getElement(e.seq2Range.start-r)===t.getElement(e.seq2Range.endExclusive-r)&&r<20;)r++;r--;let f=0;for(;e.seq2Range.start+f<s&&t.getElement(e.seq2Range.start+f)===t.getElement(e.seq2Range.endExclusive+f)&&f<20;)f++;if(0===r&&0===f)return e;let g=0,o=-1;for(let s=-r;s<=f;s++){const i=e.seq2Range.start+s,r=e.seq2Range.endExclusive+s,f=e.seq1Range.start+s,a=n.getBoundaryScore(f)+t.getBoundaryScore(i)+t.getBoundaryScore(r);a>o&&(o=a,g=s)}return 0!==g?new SequenceDiff(e.seq1Range.delta(g),e.seq2Range.delta(g)):e}