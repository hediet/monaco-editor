import{SequenceDiff,OffsetRange}from"./diffAlgorithm.js";import{Array2D}from"./utils.js";export class DynamicProgrammingDiffing{compute(e,t,n){const g=new Array2D(e.length,t.length),l=new Array2D(e.length,t.length),r=new Array2D(e.length,t.length);for(let s=0;s<e.length;s++)for(let f=0;f<t.length;f++){const o=0===s?0:g.get(s-1,f),h=0===f?0:g.get(s,f-1);let i;e.getElement(s)===t.getElement(f)?(i=0===s||0===f?0:g.get(s-1,f-1),s>0&&f>0&&3===l.get(s-1,f-1)&&(i+=r.get(s-1,f-1)),i+=n?n(s,f):1):i=-1;const a=Math.max(o,h,i);if(a===i){const e=s>0&&f>0?r.get(s-1,f-1):0;r.set(s,f,e+1),l.set(s,f,3)}else a===o?(r.set(s,f,0),l.set(s,f,1)):a===h&&(r.set(s,f,0),l.set(s,f,2));g.set(s,f,a)}const s=[];let f=e.length,o=t.length;function h(e,t){e+1===f&&t+1===o||s.push(new SequenceDiff(new OffsetRange(e+1,f),new OffsetRange(t+1,o))),f=e,o=t}let i=e.length-1,a=t.length-1;for(;i>=0&&a>=0;)3===l.get(i,a)?(h(i,a),i--,a--):1===l.get(i,a)?i--:a--;return h(-1,-1),s.reverse(),s}}