export class ColorZone{constructor(t,e,o){this._colorZoneBrand=void 0,this.from=0|t,this.to=0|e,this.colorId=0|o}static compare(t,e){return t.colorId===e.colorId?t.from===e.from?t.to-e.to:t.from-e.from:t.colorId-e.colorId}}export class OverviewRulerZone{constructor(t,e,o,i){this._overviewRulerZoneBrand=void 0,this.startLineNumber=t,this.endLineNumber=e,this.heightInLines=o,this.color=i,this._colorZone=null}static compare(t,e){return t.color===e.color?t.startLineNumber===e.startLineNumber?t.heightInLines===e.heightInLines?t.endLineNumber-e.endLineNumber:t.heightInLines-e.heightInLines:t.startLineNumber-e.startLineNumber:t.color<e.color?-1:1}setColorZone(t){this._colorZone=t}getColorZones(){return this._colorZone}}export class OverviewZoneManager{constructor(t){this._getVerticalOffsetForLine=t,this._zones=[],this._colorZonesInvalid=!1,this._lineHeight=0,this._domWidth=0,this._domHeight=0,this._outerHeight=0,this._pixelRatio=1,this._lastAssignedId=0,this._color2Id=Object.create(null),this._id2Color=[]}getId2Color(){return this._id2Color}setZones(t){this._zones=t,this._zones.sort(OverviewRulerZone.compare)}setLineHeight(t){return this._lineHeight!==t&&(this._lineHeight=t,this._colorZonesInvalid=!0,!0)}setPixelRatio(t){this._pixelRatio=t,this._colorZonesInvalid=!0}getDOMWidth(){return this._domWidth}getCanvasWidth(){return this._domWidth*this._pixelRatio}setDOMWidth(t){return this._domWidth!==t&&(this._domWidth=t,this._colorZonesInvalid=!0,!0)}getDOMHeight(){return this._domHeight}getCanvasHeight(){return this._domHeight*this._pixelRatio}setDOMHeight(t){return this._domHeight!==t&&(this._domHeight=t,this._colorZonesInvalid=!0,!0)}getOuterHeight(){return this._outerHeight}setOuterHeight(t){return this._outerHeight!==t&&(this._outerHeight=t,this._colorZonesInvalid=!0,!0)}resolveColorZones(){const t=this._colorZonesInvalid,e=Math.floor(this._lineHeight),o=Math.floor(this.getCanvasHeight()),i=o/Math.floor(this._outerHeight),r=Math.floor(4*this._pixelRatio/2),s=[];for(let h=0,n=this._zones.length;h<n;h++){const n=this._zones[h];if(!t){const t=n.getColorZones();if(t){s.push(t);continue}}const l=this._getVerticalOffsetForLine(n.startLineNumber),c=0===n.heightInLines?this._getVerticalOffsetForLine(n.endLineNumber)+e:l+n.heightInLines*e,_=Math.floor(i*l),a=Math.floor(i*c);let d=Math.floor((_+a)/2),g=a-d;g<r&&(g=r),d-g<0&&(d=g),d+g>o&&(d=o-g);const u=n.color;let m=this._color2Id[u];m||(m=++this._lastAssignedId,this._color2Id[u]=m,this._id2Color[m]=u);const I=new ColorZone(d-g,d+g,m);n.setColorZone(I),s.push(I)}return this._colorZonesInvalid=!1,s.sort(ColorZone.compare),s}}