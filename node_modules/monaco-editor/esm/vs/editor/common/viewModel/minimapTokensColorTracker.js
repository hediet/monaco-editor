import{Emitter}from"../../../base/common/event.js";import{Disposable,markAsSingleton}from"../../../base/common/lifecycle.js";import{RGBA8}from"../core/rgba.js";import{TokenizationRegistry}from"../languages.js";class MinimapTokensColorTracker extends Disposable{static getInstance(){return this._INSTANCE||(this._INSTANCE=markAsSingleton(new MinimapTokensColorTracker)),this._INSTANCE}constructor(){super(),this._onDidChange=new Emitter,this.onDidChange=this._onDidChange.event,this._updateColorMap(),this._register(TokenizationRegistry.onDidChange((o=>{o.changedColorMap&&this._updateColorMap()})))}_updateColorMap(){const o=TokenizationRegistry.getColorMap();if(!o)return this._colors=[RGBA8.Empty],void(this._backgroundIsLight=!0);this._colors=[RGBA8.Empty];for(let t=1;t<o.length;t++){const e=o[t].rgba;this._colors[t]=new RGBA8(e.r,e.g,e.b,Math.round(255*e.a))}const t=o[2].getRelativeLuminance();this._backgroundIsLight=t>=.5,this._onDidChange.fire(void 0)}getColor(o){return(o<1||o>=this._colors.length)&&(o=2),this._colors[o]}backgroundIsLight(){return this._backgroundIsLight}}MinimapTokensColorTracker._INSTANCE=null;export{MinimapTokensColorTracker};