import{Emitter}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import{Scrollable}from"../../../base/common/scrollable.js";import{LinesLayout}from"./linesLayout.js";import{Viewport}from"../viewModel.js";import{ContentSizeChangedEvent}from"../viewModelEventDispatcher.js";const SMOOTH_SCROLLING_TIME=125;class EditorScrollDimensions{constructor(t,e,i,o){(t|=0)<0&&(t=0),(e|=0)<0&&(e=0),(i|=0)<0&&(i=0),(o|=0)<0&&(o=0),this.width=t,this.contentWidth=e,this.scrollWidth=Math.max(t,e),this.height=i,this.contentHeight=o,this.scrollHeight=Math.max(i,o)}equals(t){return this.width===t.width&&this.contentWidth===t.contentWidth&&this.height===t.height&&this.contentHeight===t.contentHeight}}class EditorScrollable extends Disposable{constructor(t,e){super(),this._onDidContentSizeChange=this._register(new Emitter),this.onDidContentSizeChange=this._onDidContentSizeChange.event,this._dimensions=new EditorScrollDimensions(0,0,0,0),this._scrollable=this._register(new Scrollable({forceIntegerValues:!0,smoothScrollDuration:t,scheduleAtNextAnimationFrame:e})),this.onDidScroll=this._scrollable.onScroll}getScrollable(){return this._scrollable}setSmoothScrollDuration(t){this._scrollable.setSmoothScrollDuration(t)}validateScrollPosition(t){return this._scrollable.validateScrollPosition(t)}getScrollDimensions(){return this._dimensions}setScrollDimensions(t){if(this._dimensions.equals(t))return;const e=this._dimensions;this._dimensions=t,this._scrollable.setScrollDimensions({width:t.width,scrollWidth:t.scrollWidth,height:t.height,scrollHeight:t.scrollHeight},!0);const i=e.contentWidth!==t.contentWidth,o=e.contentHeight!==t.contentHeight;(i||o)&&this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(e.contentWidth,e.contentHeight,t.contentWidth,t.contentHeight))}getFutureScrollPosition(){return this._scrollable.getFutureScrollPosition()}getCurrentScrollPosition(){return this._scrollable.getCurrentScrollPosition()}setScrollPositionNow(t){this._scrollable.setScrollPositionNow(t)}setScrollPositionSmooth(t){this._scrollable.setScrollPositionSmooth(t)}}export class ViewLayout extends Disposable{constructor(t,e,i){super(),this._configuration=t;const o=this._configuration.options,s=o.get(138),l=o.get(80);this._linesLayout=new LinesLayout(e,o.get(63),l.top,l.bottom),this._scrollable=this._register(new EditorScrollable(0,i)),this._configureSmoothScrollDuration(),this._scrollable.setScrollDimensions(new EditorScrollDimensions(s.contentWidth,0,s.height,0)),this.onDidScroll=this._scrollable.onDidScroll,this.onDidContentSizeChange=this._scrollable.onDidContentSizeChange,this._updateHeight()}dispose(){super.dispose()}getScrollable(){return this._scrollable.getScrollable()}onHeightMaybeChanged(){this._updateHeight()}_configureSmoothScrollDuration(){this._scrollable.setSmoothScrollDuration(this._configuration.options.get(108)?125:0)}onConfigurationChanged(t){const e=this._configuration.options;if(t.hasChanged(63)&&this._linesLayout.setLineHeight(e.get(63)),t.hasChanged(80)){const t=e.get(80);this._linesLayout.setPadding(t.top,t.bottom)}if(t.hasChanged(138)){const t=e.get(138),i=t.contentWidth,o=t.height,s=this._scrollable.getScrollDimensions(),l=s.contentWidth;this._scrollable.setScrollDimensions(new EditorScrollDimensions(i,s.contentWidth,o,this._getContentHeight(i,o,l)))}else this._updateHeight();t.hasChanged(108)&&this._configureSmoothScrollDuration()}onFlushed(t){this._linesLayout.onFlushed(t)}onLinesDeleted(t,e){this._linesLayout.onLinesDeleted(t,e)}onLinesInserted(t,e){this._linesLayout.onLinesInserted(t,e)}_getHorizontalScrollbarHeight(t,e){const i=this._configuration.options.get(97);return 2===i.horizontal||t>=e?0:i.horizontalScrollbarSize}_getContentHeight(t,e,i){const o=this._configuration.options;let s=this._linesLayout.getLinesTotalHeight();return o.get(99)?s+=Math.max(0,e-o.get(63)-o.get(80).bottom):s+=this._getHorizontalScrollbarHeight(t,i),s}_updateHeight(){const t=this._scrollable.getScrollDimensions(),e=t.width,i=t.height,o=t.contentWidth;this._scrollable.setScrollDimensions(new EditorScrollDimensions(e,t.contentWidth,i,this._getContentHeight(e,i,o)))}getCurrentViewport(){const t=this._scrollable.getScrollDimensions(),e=this._scrollable.getCurrentScrollPosition();return new Viewport(e.scrollTop,e.scrollLeft,t.width,t.height)}getFutureViewport(){const t=this._scrollable.getScrollDimensions(),e=this._scrollable.getFutureScrollPosition();return new Viewport(e.scrollTop,e.scrollLeft,t.width,t.height)}_computeContentWidth(t){const e=this._configuration.options,i=e.get(139),o=e.get(47),s=e.get(138);if(i.isViewportWrapping){const i=e.get(69);return t>s.contentWidth+o.typicalHalfwidthCharacterWidth&&i.enabled&&"right"===i.side?t+s.verticalScrollbarWidth:t}{const i=e.get(98)*o.typicalHalfwidthCharacterWidth,l=this._linesLayout.getWhitespaceMinWidth();return Math.max(t+i+s.verticalScrollbarWidth,l)}}setMaxLineWidth(t){const e=this._scrollable.getScrollDimensions();this._scrollable.setScrollDimensions(new EditorScrollDimensions(e.width,this._computeContentWidth(t),e.height,e.contentHeight)),this._updateHeight()}saveState(){const t=this._scrollable.getFutureScrollPosition(),e=t.scrollTop,i=this._linesLayout.getLineNumberAtOrAfterVerticalOffset(e);return{scrollTop:e,scrollTopWithoutViewZones:e-this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(i),scrollLeft:t.scrollLeft}}changeWhitespace(t){const e=this._linesLayout.changeWhitespace(t);return e&&this.onHeightMaybeChanged(),e}getVerticalOffsetForLineNumber(t,e=!1){return this._linesLayout.getVerticalOffsetForLineNumber(t,e)}getVerticalOffsetAfterLineNumber(t,e=!1){return this._linesLayout.getVerticalOffsetAfterLineNumber(t,e)}isAfterLines(t){return this._linesLayout.isAfterLines(t)}isInTopPadding(t){return this._linesLayout.isInTopPadding(t)}isInBottomPadding(t){return this._linesLayout.isInBottomPadding(t)}getLineNumberAtVerticalOffset(t){return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(t)}getWhitespaceAtVerticalOffset(t){return this._linesLayout.getWhitespaceAtVerticalOffset(t)}getLinesViewportData(){const t=this.getCurrentViewport();return this._linesLayout.getLinesViewportData(t.top,t.top+t.height)}getLinesViewportDataAtScrollTop(t){const e=this._scrollable.getScrollDimensions();return t+e.height>e.scrollHeight&&(t=e.scrollHeight-e.height),t<0&&(t=0),this._linesLayout.getLinesViewportData(t,t+e.height)}getWhitespaceViewportData(){const t=this.getCurrentViewport();return this._linesLayout.getWhitespaceViewportData(t.top,t.top+t.height)}getWhitespaces(){return this._linesLayout.getWhitespaces()}getContentWidth(){return this._scrollable.getScrollDimensions().contentWidth}getScrollWidth(){return this._scrollable.getScrollDimensions().scrollWidth}getContentHeight(){return this._scrollable.getScrollDimensions().contentHeight}getScrollHeight(){return this._scrollable.getScrollDimensions().scrollHeight}getCurrentScrollLeft(){return this._scrollable.getCurrentScrollPosition().scrollLeft}getCurrentScrollTop(){return this._scrollable.getCurrentScrollPosition().scrollTop}validateScrollPosition(t){return this._scrollable.validateScrollPosition(t)}setScrollPosition(t,e){1===e?this._scrollable.setScrollPositionNow(t):this._scrollable.setScrollPositionSmooth(t)}deltaScrollNow(t,e){const i=this._scrollable.getCurrentScrollPosition();this._scrollable.setScrollPositionNow({scrollLeft:i.scrollLeft+t,scrollTop:i.scrollTop+e})}}