export function createScopedLineTokens(t,e){const n=t.getCount(),s=t.findTokenIndexAtOffset(e),r=t.getLanguageId(s);let i=s;for(;i+1<n&&t.getLanguageId(i+1)===r;)i++;let o=s;for(;o>0&&t.getLanguageId(o-1)===r;)o--;return new ScopedLineTokens(t,r,o,i+1,t.getStartOffset(o),t.getEndOffset(i))}export class ScopedLineTokens{constructor(t,e,n,s,r,i){this._scopedLineTokensBrand=void 0,this._actual=t,this.languageId=e,this._firstTokenIndex=n,this._lastTokenIndex=s,this.firstCharOffset=r,this._lastCharOffset=i}getLineContent(){return this._actual.getLineContent().substring(this.firstCharOffset,this._lastCharOffset)}getActualLineContentBefore(t){return this._actual.getLineContent().substring(0,this.firstCharOffset+t)}getTokenCount(){return this._lastTokenIndex-this._firstTokenIndex}findTokenIndexAtOffset(t){return this._actual.findTokenIndexAtOffset(t+this.firstCharOffset)-this._firstTokenIndex}getStandardTokenType(t){return this._actual.getStandardTokenType(t+this._firstTokenIndex)}}export function ignoreBracketsInToken(t){return 0!=(3&t)}