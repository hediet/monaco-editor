var __awaiter=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,a){function s(e){try{c(o.next(e))}catch(e){a(e)}}function r(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,r)}c((o=o.apply(e,t||[])).next())}))};import*as strings from"../../../base/common/strings.js";import{LineTokens}from"../tokens/lineTokens.js";import{TokenizationRegistry}from"../languages.js";import{NullState,nullTokenizeEncoded}from"./nullTokenize.js";const fallback={getInitialState:()=>NullState,tokenizeEncoded:(e,t,n)=>nullTokenizeEncoded(0,n)};export function tokenizeToString(e,t,n){return __awaiter(this,void 0,void 0,(function*(){if(!n)return _tokenizeToString(t,e.languageIdCodec,fallback);const o=yield TokenizationRegistry.getOrCreate(n);return _tokenizeToString(t,e.languageIdCodec,o||fallback)}))}export function tokenizeLineToHTML(e,t,n,o,i,a,s){let r="<div>",c=o,l=0,f=!0;for(let k=0,u=t.getCount();k<u;k++){const u=t.getEndOffset(k);if(u<=o)continue;let g="";for(;c<u&&c<i;c++){const t=e.charCodeAt(c);switch(t){case 9:{let e=a-(c+l)%a;for(l+=e-1;e>0;)s&&f?(g+="&#160;",f=!1):(g+=" ",f=!0),e--;break}case 60:g+="&lt;",f=!1;break;case 62:g+="&gt;",f=!1;break;case 38:g+="&amp;",f=!1;break;case 0:g+="&#00;",f=!1;break;case 65279:case 8232:case 8233:case 133:g+="ï¿½",f=!1;break;case 13:g+="&#8203",f=!1;break;case 32:s&&f?(g+="&#160;",f=!1):(g+=" ",f=!0);break;default:g+=String.fromCharCode(t),f=!1}}if(r+=`<span style="${t.getInlineStyle(k,n)}">${g}</span>`,u>i||c>=i)break}return r+="</div>",r}export function _tokenizeToString(e,t,n){let o='<div class="monaco-tokenized-source">';const i=strings.splitLines(e);let a=n.getInitialState();for(let e=0,s=i.length;e<s;e++){const s=i[e];e>0&&(o+="<br/>");const r=n.tokenizeEncoded(s,!0,a);LineTokens.convertToEndOffset(r.tokens,s.length);const c=new LineTokens(r.tokens,s,t).inflate();let l=0;for(let e=0,t=c.getCount();e<t;e++){const t=c.getClassName(e),n=c.getEndOffset(e);o+=`<span class="${t}">${strings.escape(s.substring(l,n))}</span>`,l=n}a=r.endState}return o+="</div>",o}