import*as strings from"../../../base/common/strings.js";import{IndentAction}from"./languageConfiguration.js";import{createScopedLineTokens}from"./supports.js";import{getScopedLineTokens}from"./languageConfigurationRegistry.js";function getPrecedingValidLine(n,t,e){const i=n.tokenization.getLanguageIdAtPosition(t,0);if(t>1){let o,r=-1;for(o=t-1;o>=1;o--){if(n.tokenization.getLanguageIdAtPosition(o,0)!==i)return r;const t=n.getLineContent(o);if(!e.shouldIgnore(t)&&!/^\s+$/.test(t)&&""!==t)return o;r=o}}return-1}export function getInheritIndentForLine(n,t,e,i=!0,o){if(n<4)return null;const r=o.getLanguageConfiguration(t.tokenization.getLanguageId()).indentRulesSupport;if(!r)return null;if(e<=1)return{indentation:"",action:null};for(let n=e-1;n>0&&""===t.getLineContent(n);n--)if(1===n)return{indentation:"",action:null};const s=getPrecedingValidLine(t,e,r);if(s<0)return null;if(s<1)return{indentation:"",action:null};const a=t.getLineContent(s);if(r.shouldIncrease(a)||r.shouldIndentNextLine(a))return{indentation:strings.getLeadingWhitespace(a),action:IndentAction.Indent,line:s};if(r.shouldDecrease(a))return{indentation:strings.getLeadingWhitespace(a),action:null,line:s};{if(1===s)return{indentation:strings.getLeadingWhitespace(t.getLineContent(s)),action:null,line:s};const n=s-1,e=r.getIndentMetadata(t.getLineContent(n));if(!(3&e)&&4&e){let e=0;for(let i=n-1;i>0;i--)if(!r.shouldIndentNextLine(t.getLineContent(i))){e=i;break}return{indentation:strings.getLeadingWhitespace(t.getLineContent(e+1)),action:null,line:e+1}}if(i)return{indentation:strings.getLeadingWhitespace(t.getLineContent(s)),action:null,line:s};for(let n=s;n>0;n--){const e=t.getLineContent(n);if(r.shouldIncrease(e))return{indentation:strings.getLeadingWhitespace(e),action:IndentAction.Indent,line:n};if(r.shouldIndentNextLine(e)){let e=0;for(let i=n-1;i>0;i--)if(!r.shouldIndentNextLine(t.getLineContent(n))){e=i;break}return{indentation:strings.getLeadingWhitespace(t.getLineContent(e+1)),action:null,line:e+1}}if(r.shouldDecrease(e))return{indentation:strings.getLeadingWhitespace(e),action:null,line:n}}return{indentation:strings.getLeadingWhitespace(t.getLineContent(1)),action:null,line:1}}}export function getGoodIndentForLine(n,t,e,i,o,r){if(n<4)return null;const s=r.getLanguageConfiguration(e);if(!s)return null;const a=r.getLanguageConfiguration(e).indentRulesSupport;if(!a)return null;const g=getInheritIndentForLine(n,t,i,void 0,r),u=t.getLineContent(i);if(g){const e=g.line;if(void 0!==e){let r=!0;for(let n=e;n<i-1;n++)if(!/^\s*$/.test(t.getLineContent(n))){r=!1;break}if(r){const i=s.onEnter(n,"",t.getLineContent(e),"");if(i){let n=strings.getLeadingWhitespace(t.getLineContent(e));return i.removeText&&(n=n.substring(0,n.length-i.removeText)),i.indentAction===IndentAction.Indent||i.indentAction===IndentAction.IndentOutdent?n=o.shiftIndent(n):i.indentAction===IndentAction.Outdent&&(n=o.unshiftIndent(n)),a.shouldDecrease(u)&&(n=o.unshiftIndent(n)),i.appendText&&(n+=i.appendText),strings.getLeadingWhitespace(n)}}}return a.shouldDecrease(u)?g.action===IndentAction.Indent?g.indentation:o.unshiftIndent(g.indentation):g.action===IndentAction.Indent?o.shiftIndent(g.indentation):g.indentation}return null}export function getIndentForEnter(n,t,e,i,o){if(n<4)return null;t.tokenization.forceTokenization(e.startLineNumber);const r=t.tokenization.getLineTokens(e.startLineNumber),s=createScopedLineTokens(r,e.startColumn-1),a=s.getLineContent();let g,u,d=!1;s.firstCharOffset>0&&r.getLanguageId(0)!==s.languageId?(d=!0,g=a.substr(0,e.startColumn-1-s.firstCharOffset)):g=r.getLineContent().substring(0,e.startColumn-1),u=e.isEmpty()?a.substr(e.startColumn-1-s.firstCharOffset):getScopedLineTokens(t,e.endLineNumber,e.endColumn).getLineContent().substr(e.endColumn-1-s.firstCharOffset);const l=o.getLanguageConfiguration(s.languageId).indentRulesSupport;if(!l)return null;const f=g,c=strings.getLeadingWhitespace(g),L={tokenization:{getLineTokens:n=>t.tokenization.getLineTokens(n),getLanguageId:()=>t.getLanguageId(),getLanguageIdAtPosition:(n,e)=>t.getLanguageIdAtPosition(n,e)},getLineContent:n=>n===e.startLineNumber?f:t.getLineContent(n)},I=strings.getLeadingWhitespace(r.getLineContent()),C=getInheritIndentForLine(n,L,e.startLineNumber+1,void 0,o);if(!C){const n=d?I:c;return{beforeEnter:n,afterEnter:n}}let h=d?I:C.indentation;return C.action===IndentAction.Indent&&(h=i.shiftIndent(h)),l.shouldDecrease(u)&&(h=i.unshiftIndent(h)),{beforeEnter:d?I:c,afterEnter:h}}export function getIndentActionForType(n,t,e,i,o,r){if(n<4)return null;const s=getScopedLineTokens(t,e.startLineNumber,e.startColumn);if(s.firstCharOffset)return null;const a=r.getLanguageConfiguration(s.languageId).indentRulesSupport;if(!a)return null;const g=s.getLineContent(),u=g.substr(0,e.startColumn-1-s.firstCharOffset);let d;if(d=e.isEmpty()?g.substr(e.startColumn-1-s.firstCharOffset):getScopedLineTokens(t,e.endLineNumber,e.endColumn).getLineContent().substr(e.endColumn-1-s.firstCharOffset),!a.shouldDecrease(u+d)&&a.shouldDecrease(u+i+d)){const i=getInheritIndentForLine(n,t,e.startLineNumber,!1,r);if(!i)return null;let s=i.indentation;return i.action!==IndentAction.Indent&&(s=o.unshiftIndent(s)),s}return null}export function getIndentMetadata(n,t,e){const i=e.getLanguageConfiguration(n.getLanguageId()).indentRulesSupport;return i?t<1||t>n.getLineCount()?null:i.getIndentMetadata(n.getLineContent(t)):null}