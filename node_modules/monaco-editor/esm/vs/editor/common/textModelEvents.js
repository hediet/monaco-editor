export class ModelRawFlush{constructor(){this.changeType=1}}export class LineInjectedText{static applyInjectedText(e,n){if(!n||0===n.length)return e;let t="",o=0;for(const s of n)t+=e.substring(o,s.column-1),o=s.column-1,t+=s.options.content;return t+=e.substring(o),t}static fromDecorations(e){const n=[];for(const t of e)t.options.before&&t.options.before.content.length>0&&n.push(new LineInjectedText(t.ownerId,t.range.startLineNumber,t.range.startColumn,t.options.before,0)),t.options.after&&t.options.after.content.length>0&&n.push(new LineInjectedText(t.ownerId,t.range.endLineNumber,t.range.endColumn,t.options.after,1));return n.sort(((e,n)=>e.lineNumber===n.lineNumber?e.column===n.column?e.order-n.order:e.column-n.column:e.lineNumber-n.lineNumber)),n}constructor(e,n,t,o,s){this.ownerId=e,this.lineNumber=n,this.column=t,this.options=o,this.order=s}}export class ModelRawLineChanged{constructor(e,n,t){this.changeType=2,this.lineNumber=e,this.detail=n,this.injectedText=t}}export class ModelRawLinesDeleted{constructor(e,n){this.changeType=3,this.fromLineNumber=e,this.toLineNumber=n}}export class ModelRawLinesInserted{constructor(e,n,t,o){this.changeType=4,this.injectedTexts=o,this.fromLineNumber=e,this.toLineNumber=n,this.detail=t}}export class ModelRawEOLChanged{constructor(){this.changeType=5}}export class ModelRawContentChangedEvent{constructor(e,n,t,o){this.changes=e,this.versionId=n,this.isUndoing=t,this.isRedoing=o,this.resultingSelection=null}containsEvent(e){for(let n=0,t=this.changes.length;n<t;n++)if(this.changes[n].changeType===e)return!0;return!1}static merge(e,n){const t=[].concat(e.changes).concat(n.changes),o=n.versionId,s=e.isUndoing||n.isUndoing,i=e.isRedoing||n.isRedoing;return new ModelRawContentChangedEvent(t,o,s,i)}}export class ModelInjectedTextChangedEvent{constructor(e){this.changes=e}}export class InternalModelContentChangeEvent{constructor(e,n){this.rawContentChangedEvent=e,this.contentChangedEvent=n}merge(e){const n=ModelRawContentChangedEvent.merge(this.rawContentChangedEvent,e.rawContentChangedEvent),t=InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent,e.contentChangedEvent);return new InternalModelContentChangeEvent(n,t)}static _mergeChangeEvents(e,n){return{changes:[].concat(e.changes).concat(n.changes),eol:n.eol,versionId:n.versionId,isUndoing:e.isUndoing||n.isUndoing,isRedoing:e.isRedoing||n.isRedoing,isFlush:e.isFlush||n.isFlush}}}