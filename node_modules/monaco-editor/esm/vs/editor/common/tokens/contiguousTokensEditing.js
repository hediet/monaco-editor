import{LineTokens}from"./lineTokens.js";export const EMPTY_LINE_TOKENS=new Uint32Array(0).buffer;export class ContiguousTokensEditing{static deleteBeginning(n,t){return null===n||n===EMPTY_LINE_TOKENS?n:ContiguousTokensEditing.delete(n,0,t)}static deleteEnding(n,t){if(null===n||n===EMPTY_LINE_TOKENS)return n;const e=toUint32Array(n),r=e[e.length-2];return ContiguousTokensEditing.delete(n,t,r)}static delete(n,t,e){if(null===n||n===EMPTY_LINE_TOKENS||t===e)return n;const r=toUint32Array(n),i=r.length>>>1;if(0===t&&r[r.length-2]===e)return EMPTY_LINE_TOKENS;const o=LineTokens.findIndexInTokensArray(r,t),l=o>0?r[o-1<<1]:0;if(e<r[o<<1]){const l=e-t;for(let n=o;n<i;n++)r[n<<1]-=l;return n}let s,u;l!==t?(r[o<<1]=t,s=o+1<<1,u=t):(s=o<<1,u=l);const E=e-t;for(let n=o+1;n<i;n++){const t=r[n<<1]-E;t>u&&(r[s++]=t,r[s++]=r[1+(n<<1)],u=t)}if(s===r.length)return n;const f=new Uint32Array(s);return f.set(r.subarray(0,s),0),f.buffer}static append(n,t){if(t===EMPTY_LINE_TOKENS)return n;if(n===EMPTY_LINE_TOKENS)return t;if(null===n)return n;if(null===t)return null;const e=toUint32Array(n),r=toUint32Array(t),i=r.length>>>1,o=new Uint32Array(e.length+r.length);o.set(e,0);let l=e.length;const s=e[e.length-2];for(let n=0;n<i;n++)o[l++]=r[n<<1]+s,o[l++]=r[1+(n<<1)];return o.buffer}static insert(n,t,e){if(null===n||n===EMPTY_LINE_TOKENS)return n;const r=toUint32Array(n),i=r.length>>>1;let o=LineTokens.findIndexInTokensArray(r,t);o>0&&r[o-1<<1]===t&&o--;for(let n=o;n<i;n++)r[n<<1]+=e;return n}}export function toUint32Array(n){return n instanceof Uint32Array?n:new Uint32Array(n)}