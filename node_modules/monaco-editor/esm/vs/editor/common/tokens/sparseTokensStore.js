import*as arrays from"../../../base/common/arrays.js";import{LineTokens}from"./lineTokens.js";export class SparseTokensStore{constructor(e){this._pieces=[],this._isComplete=!1,this._languageIdCodec=e}flush(){this._pieces=[],this._isComplete=!1}isEmpty(){return 0===this._pieces.length}set(e,t){this._pieces=e||[],this._isComplete=t}setPartial(e,t){let n=e;if(t.length>0){const i=t[0].getRange(),s=t[t.length-1].getRange();if(!i||!s)return e;n=e.plusRange(i).plusRange(s)}let i=null;for(let e=0,t=this._pieces.length;e<t;e++){const s=this._pieces[e];if(s.endLineNumber<n.startLineNumber)continue;if(s.startLineNumber>n.endLineNumber){i=i||{index:e};break}if(s.removeTokens(n),s.isEmpty()){this._pieces.splice(e,1),e--,t--;continue}if(s.endLineNumber<n.startLineNumber)continue;if(s.startLineNumber>n.endLineNumber){i=i||{index:e};continue}const[r,a]=s.split(n);r.isEmpty()?i=i||{index:e}:a.isEmpty()||(this._pieces.splice(e,1,r,a),e++,t++,i=i||{index:e})}return i=i||{index:this._pieces.length},t.length>0&&(this._pieces=arrays.arrayInsert(this._pieces,i.index,t)),n}isComplete(){return this._isComplete}addSparseTokens(e,t){if(0===t.getLineContent().length)return t;const n=this._pieces;if(0===n.length)return t;const i=n[SparseTokensStore._findFirstPieceWithLine(n,e)].getLineTokens(e);if(!i)return t;const s=t.getCount(),r=i.getCount();let a=0;const o=[];let c=0,f=0;const g=(e,t)=>{e!==f&&(f=e,o[c++]=e,o[c++]=t)};for(let e=0;e<r;e++){const n=i.getStartCharacter(e),r=i.getEndCharacter(e),o=i.getMetadata(e),c=((1&o?2048:0)|(2&o?4096:0)|(4&o?8192:0)|(8&o?16384:0)|(16&o?16744448:0)|(32&o?4278190080:0))>>>0,f=~c>>>0;for(;a<s&&t.getEndOffset(a)<=n;)g(t.getEndOffset(a),t.getMetadata(a)),a++;for(a<s&&t.getStartOffset(a)<n&&g(n,t.getMetadata(a));a<s&&t.getEndOffset(a)<r;)g(t.getEndOffset(a),t.getMetadata(a)&f|o&c),a++;if(a<s)g(r,t.getMetadata(a)&f|o&c),t.getEndOffset(a)===r&&a++;else{const e=Math.min(Math.max(0,a-1),s-1);g(r,t.getMetadata(e)&f|o&c)}}for(;a<s;)g(t.getEndOffset(a),t.getMetadata(a)),a++;return new LineTokens(new Uint32Array(o),t.getLineContent(),this._languageIdCodec)}static _findFirstPieceWithLine(e,t){let n=0,i=e.length-1;for(;n<i;){let s=n+Math.floor((i-n)/2);if(e[s].endLineNumber<t)n=s+1;else{if(!(e[s].startLineNumber>t)){for(;s>n&&e[s-1].startLineNumber<=t&&t<=e[s-1].endLineNumber;)s--;return s}i=s-1}}return n}acceptEdit(e,t,n,i,s){for(const r of this._pieces)r.acceptEdit(e,t,n,i,s)}}