import{LanguageAgnosticBracketTokens}from"./bracketPairsTree/brackets.js";import{lengthAdd,lengthGetColumnCountIfZeroLineCount,lengthZero}from"./bracketPairsTree/length.js";import{parseDocument}from"./bracketPairsTree/parser.js";import{DenseKeyProvider}from"./bracketPairsTree/smallImmutableSet.js";import{TextBufferTokenizer}from"./bracketPairsTree/tokenizer.js";export function fixBracketsInLine(e,n){const t=new DenseKeyProvider,r=new LanguageAgnosticBracketTokens(t,(e=>n.getLanguageConfiguration(e))),i=new TextBufferTokenizer(new StaticTokenizerSource([e]),r),o=parseDocument(i,[],void 0,!0);let s="";const g=e.getLineContent();return function e(n,t){if(2===n.kind)if(e(n.openingBracket,t),t=lengthAdd(t,n.openingBracket.length),n.child&&(e(n.child,t),t=lengthAdd(t,n.child.length)),n.closingBracket)e(n.closingBracket,t),t=lengthAdd(t,n.closingBracket.length);else{const e=r.getSingleLanguageBracketTokens(n.openingBracket.languageId).findClosingTokenText(n.openingBracket.bracketIds);s+=e}else if(3===n.kind);else if(0===n.kind||1===n.kind)s+=g.substring(lengthGetColumnCountIfZeroLineCount(t),lengthGetColumnCountIfZeroLineCount(lengthAdd(t,n.length)));else if(4===n.kind)for(const r of n.children)e(r,t),t=lengthAdd(t,r.length)}(o,lengthZero),s}class StaticTokenizerSource{constructor(e){this.lines=e,this.tokenization={getLineTokens:e=>this.lines[e-1]}}getLineCount(){return this.lines.length}getLineLength(e){return this.lines[e-1].getLineContent().length}}