import{splitLines}from"../../../../../base/common/strings.js";import{Range}from"../../../core/range.js";class LengthObj{constructor(t,n){this.lineCount=t,this.columnCount=n}toString(){return`${this.lineCount},${this.columnCount}`}}LengthObj.zero=new LengthObj(0,0);export{LengthObj};export function lengthDiff(t,n,o,e){return t!==o?toLength(o-t,e):toLength(0,e-n)}export const lengthZero=0;export function lengthIsZero(t){return 0===t}const factor=Math.pow(2,26);export function toLength(t,n){return t*factor+n}export function lengthToObj(t){const n=t,o=Math.floor(n/factor);return new LengthObj(o,n-o*factor)}export function lengthGetLineCount(t){return Math.floor(t/factor)}export function lengthGetColumnCountIfZeroLineCount(t){return t}export function lengthAdd(t,n){let o=t+n;return n>=factor&&(o-=t%factor),o}export function sumLengths(t,n){return t.reduce(((t,o)=>lengthAdd(t,n(o))),0)}export function lengthEquals(t,n){return t===n}export function lengthDiffNonNegative(t,n){const o=t,e=n;if(e-o<=0)return 0;const r=Math.floor(o/factor),u=Math.floor(e/factor),c=e-u*factor;return r===u?toLength(0,c-(o-r*factor)):toLength(u-r,c)}export function lengthLessThan(t,n){return t<n}export function lengthLessThanEqual(t,n){return t<=n}export function lengthGreaterThanEqual(t,n){return t>=n}export function positionToLength(t){return toLength(t.lineNumber-1,t.column-1)}export function lengthsToRange(t,n){const o=t,e=Math.floor(o/factor),r=o-e*factor,u=n,c=Math.floor(u/factor);return new Range(e+1,r+1,c+1,u-c*factor+1)}export function lengthOfString(t){const n=splitLines(t);return toLength(n.length-1,n[n.length-1].length)}