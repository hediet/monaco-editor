import{ListAstNode}from"./ast.js";export function concat23Trees(t){if(0===t.length)return null;if(1===t.length)return t[0];let e=0;function n(){if(e>=t.length)return null;const n=e,i=t[n].listHeight;for(e++;e<t.length&&t[e].listHeight===i;)e++;return e-n>=2?concat23TreesOfSameHeight(0===n&&e===t.length?t:t.slice(n,e),!1):t[n]}let i=n(),l=n();if(!l)return i;for(let t=n();t;t=n())heightDiff(i,l)<=heightDiff(l,t)?(i=concat(i,l),l=t):l=concat(l,t);return concat(i,l)}export function concat23TreesOfSameHeight(t,e=!1){if(0===t.length)return null;if(1===t.length)return t[0];let n=t.length;for(;n>3;){const i=n>>1;for(let l=0;l<i;l++){const i=l<<1;t[l]=ListAstNode.create23(t[i],t[i+1],i+3===n?t[i+2]:null,e)}n=i}return ListAstNode.create23(t[0],t[1],n>=3?t[2]:null,e)}function heightDiff(t,e){return Math.abs(t.listHeight-e.listHeight)}function concat(t,e){return t.listHeight===e.listHeight?ListAstNode.create23(t,e,null,!1):t.listHeight>e.listHeight?append(t,e):prepend(e,t)}function append(t,e){let n=t=t.toMutable();const i=[];let l;for(;;){if(e.listHeight===n.listHeight){l=e;break}if(4!==n.kind)throw new Error("unexpected");i.push(n),n=n.makeLastElementMutable()}for(let t=i.length-1;t>=0;t--){const e=i[t];l?e.childrenLength>=3?l=ListAstNode.create23(e.unappendChild(),l,null,!1):(e.appendChildOfSameHeight(l),l=void 0):e.handleChildrenChanged()}return l?ListAstNode.create23(t,l,null,!1):t}function prepend(t,e){let n=t=t.toMutable();const i=[];for(;e.listHeight!==n.listHeight;){if(4!==n.kind)throw new Error("unexpected");i.push(n),n=n.makeFirstElementMutable()}let l=e;for(let t=i.length-1;t>=0;t--){const e=i[t];l?e.childrenLength>=3?l=ListAstNode.create23(l,e.unprependChild(),null,!1):(e.prependChildOfSameHeight(l),l=void 0):e.handleChildrenChanged()}return l?ListAstNode.create23(l,t,null,!1):t}