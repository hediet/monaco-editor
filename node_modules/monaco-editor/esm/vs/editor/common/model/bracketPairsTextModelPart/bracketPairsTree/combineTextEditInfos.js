import{ArrayQueue}from"../../../../../base/common/arrays.js";import{TextEditInfo}from"./beforeEditPositionMapper.js";import{lengthAdd,lengthDiffNonNegative,lengthEquals,lengthIsZero,lengthLessThanEqual,lengthZero,sumLengths}from"./length.js";export function combineTextEditInfos(e,t){if(0===e.length)return t;const n=new ArrayQueue(toTextMap(e)),o=toTextMap(t);let h,g=lengthZero;function s(e){const t=[];for(;;){if(void 0!==h&&!lengthIsZero(h)||!lengthIsZero(g)){let n;void 0!==e&&lengthLessThanEqual(e,g)?(n=e,g=lengthDiffNonNegative(e,g),e=lengthZero):(n=g,void 0!==e&&(e=lengthDiffNonNegative(g,e)),g=lengthZero),void 0===h?t.push({oldLength:n,newLength:void 0}):(t.push({oldLength:h,newLength:n}),h=lengthZero)}if(void 0!==e&&lengthIsZero(e))break;const o=n.dequeue();if(!o){void 0!==e&&t.push({oldLength:e,newLength:void 0});break}void 0===o.newLength?(g=o.oldLength,h=void 0):(h=o.oldLength,g=o.newLength)}return t}const l=[];function f(e,t,n){if(l.length>0&&lengthEquals(l[l.length-1].endOffset,e)){const e=l[l.length-1];l[l.length-1]=new TextEditInfo(e.startOffset,t,lengthAdd(e.newLength,n))}else l.push({startOffset:e,endOffset:t,newLength:n})}let r=lengthZero;for(const e of o){const t=s(e.oldLength);if(void 0!==e.newLength){const n=sumLengths(t,(e=>e.oldLength)),o=lengthAdd(r,n);f(r,o,e.newLength),r=o}else for(const e of t){const t=r;r=lengthAdd(r,e.oldLength),void 0!==e.newLength&&f(t,r,e.newLength)}}const d=s(void 0);for(const e of d){const t=r;r=lengthAdd(r,e.oldLength),void 0!==e.newLength&&f(t,r,e.newLength)}return l}function toTextMap(e){const t=[];let n=lengthZero;for(const o of e){const e=lengthDiffNonNegative(n,o.startOffset);lengthIsZero(e)||t.push({oldLength:e});const h=lengthDiffNonNegative(o.startOffset,o.endOffset);t.push({oldLength:h,newLength:o.newLength}),n=o.endOffset}return t}