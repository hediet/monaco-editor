import{findLast}from"../../../base/common/arrays.js";import*as strings from"../../../base/common/strings.js";import{CursorColumns}from"../core/cursorColumns.js";import{Range}from"../core/range.js";import{TextModelPart}from"./textModelPart.js";import{computeIndentLevel}from"./utils.js";import{HorizontalGuidesState,IndentGuide,IndentGuideHorizontalLine}from"../textModelGuides.js";export class GuidesTextModelPart extends TextModelPart{constructor(e,t){super(),this.textModel=e,this.languageConfigurationService=t}getLanguageConfiguration(e){return this.languageConfigurationService.getLanguageConfiguration(e)}_computeIndentLevel(e){return computeIndentLevel(this.textModel.getLineContent(e+1),this.textModel.getOptions().tabSize)}getActiveIndentGuide(e,t,n){this.assertNotDisposed();const i=this.textModel.getLineCount();if(e<1||e>i)throw new Error("Illegal value for lineNumber");const o=this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules,s=Boolean(o&&o.offSide);let r=-2,l=-1,a=-2,u=-1;const d=e=>{if(-1!==r&&(-2===r||r>e-1)){r=-1,l=-1;for(let t=e-2;t>=0;t--){const e=this._computeIndentLevel(t);if(e>=0){r=t,l=e;break}}}if(-2===a){a=-1,u=-1;for(let t=e;t<i;t++){const e=this._computeIndentLevel(t);if(e>=0){a=t,u=e;break}}}};let c=-2,g=-1,m=-2,f=-1;const h=e=>{if(-2===c){c=-1,g=-1;for(let t=e-2;t>=0;t--){const e=this._computeIndentLevel(t);if(e>=0){c=t,g=e;break}}}if(-1!==m&&(-2===m||m<e-1)){m=-1,f=-1;for(let t=e;t<i;t++){const e=this._computeIndentLevel(t);if(e>=0){m=t,f=e;break}}}};let L=0,p=!0,b=0,I=!0,v=0,C=0;for(let o=0;p||I;o++){const r=e-o,m=e+o;o>1&&(r<1||r<t)&&(p=!1),o>1&&(m>i||m>n)&&(I=!1),o>5e4&&(p=!1,I=!1);let M=-1;if(p&&r>=1){const e=this._computeIndentLevel(r-1);e>=0?(a=r-1,u=e,M=Math.ceil(e/this.textModel.getOptions().indentSize)):(d(r),M=this._getIndentLevelForWhitespaceLine(s,l,u))}let N=-1;if(I&&m<=i){const e=this._computeIndentLevel(m-1);e>=0?(c=m-1,g=e,N=Math.ceil(e/this.textModel.getOptions().indentSize)):(h(m),N=this._getIndentLevelForWhitespaceLine(s,g,f))}if(0!==o){if(1===o){if(m<=i&&N>=0&&C+1===N){p=!1,L=m,b=m,v=N;continue}if(r>=1&&M>=0&&M-1===C){I=!1,L=r,b=r,v=M;continue}if(L=e,b=e,v=C,0===v)return{startLineNumber:L,endLineNumber:b,indent:v}}p&&(M>=v?L=r:p=!1),I&&(N>=v?b=m:I=!1)}else C=M}return{startLineNumber:L,endLineNumber:b,indent:v}}getLinesBracketGuides(e,t,n,i){var o;const s=[];for(let n=e;n<=t;n++)s.push([]);const r=this.textModel.bracketPairs.getBracketPairsInRangeWithMinIndentation(new Range(e,1,t,this.textModel.getLineMaxColumn(t))).toArray();let l;if(n&&r.length>0){const i=(e<=n.lineNumber&&n.lineNumber<=t?r:this.textModel.bracketPairs.getBracketPairsInRange(Range.fromPositions(n)).toArray()).filter((e=>Range.strictContainsPosition(e.range,n)));l=null===(o=findLast(i,(e=>!0)))||void 0===o?void 0:o.range}const a=this.textModel.getOptions().bracketPairColorizationOptions.independentColorPoolPerBracketType,u=new BracketPairGuidesClassNames;for(const n of r){if(!n.closingBracketRange)continue;const o=l&&n.range.equalsRange(l);if(!o&&!i.includeInactive)continue;const r=u.getInlineClassName(n.nestingLevel,n.nestingLevelOfEqualBracketType,a)+(i.highlightActive&&o?" "+u.activeClassName:""),d=n.openingBracketRange.getStartPosition(),c=n.closingBracketRange.getStartPosition(),g=i.horizontalGuides===HorizontalGuidesState.Enabled||i.horizontalGuides===HorizontalGuidesState.EnabledForActive&&o;if(n.range.startLineNumber===n.range.endLineNumber){g&&s[n.range.startLineNumber-e].push(new IndentGuide(-1,n.openingBracketRange.getEndPosition().column,r,new IndentGuideHorizontalLine(!1,c.column),-1,-1));continue}const m=this.getVisibleColumnFromPosition(c),f=this.getVisibleColumnFromPosition(n.openingBracketRange.getStartPosition()),h=Math.min(f,m,n.minVisibleColumnIndentation+1);let L=!1;strings.firstNonWhitespaceIndex(this.textModel.getLineContent(n.closingBracketRange.startLineNumber))<n.closingBracketRange.startColumn-1&&(L=!0);const p=Math.max(d.lineNumber,e),b=Math.min(c.lineNumber,t),I=L?1:0;for(let t=p;t<b+I;t++)s[t-e].push(new IndentGuide(h,-1,r,null,t===d.lineNumber?d.column:-1,t===c.lineNumber?c.column:-1));g&&(d.lineNumber>=e&&f>h&&s[d.lineNumber-e].push(new IndentGuide(h,-1,r,new IndentGuideHorizontalLine(!1,d.column),-1,-1)),c.lineNumber<=t&&m>h&&s[c.lineNumber-e].push(new IndentGuide(h,-1,r,new IndentGuideHorizontalLine(!L,c.column),-1,-1)))}for(const e of s)e.sort(((e,t)=>e.visibleColumn-t.visibleColumn));return s}getVisibleColumnFromPosition(e){return CursorColumns.visibleColumnFromColumn(this.textModel.getLineContent(e.lineNumber),e.column,this.textModel.getOptions().tabSize)+1}getLinesIndentGuides(e,t){this.assertNotDisposed();const n=this.textModel.getLineCount();if(e<1||e>n)throw new Error("Illegal value for startLineNumber");if(t<1||t>n)throw new Error("Illegal value for endLineNumber");const i=this.textModel.getOptions(),o=this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules,s=Boolean(o&&o.offSide),r=new Array(t-e+1);let l=-2,a=-1,u=-2,d=-1;for(let o=e;o<=t;o++){const t=o-e,c=this._computeIndentLevel(o-1);if(c>=0)l=o-1,a=c,r[t]=Math.ceil(c/i.indentSize);else{if(-2===l){l=-1,a=-1;for(let e=o-2;e>=0;e--){const t=this._computeIndentLevel(e);if(t>=0){l=e,a=t;break}}}if(-1!==u&&(-2===u||u<o-1)){u=-1,d=-1;for(let e=o;e<n;e++){const t=this._computeIndentLevel(e);if(t>=0){u=e,d=t;break}}}r[t]=this._getIndentLevelForWhitespaceLine(s,a,d)}}return r}_getIndentLevelForWhitespaceLine(e,t,n){const i=this.textModel.getOptions();return-1===t||-1===n?0:t<n?1+Math.floor(t/i.indentSize):t===n||e?Math.ceil(n/i.indentSize):1+Math.floor(n/i.indentSize)}}export class BracketPairGuidesClassNames{constructor(){this.activeClassName="indent-active"}getInlineClassName(e,t,n){return this.getInlineClassNameOfLevel(n?t:e)}getInlineClassNameOfLevel(e){return"bracket-indent-guide lvl-"+e%30}}