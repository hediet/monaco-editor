export function isFuzzyActionArr(t){return Array.isArray(t)}export function isFuzzyAction(t){return!isFuzzyActionArr(t)}export function isString(t){return"string"==typeof t}export function isIAction(t){return!isString(t)}export function empty(t){return!t}export function fixCase(t,n){return t.ignoreCase&&n?n.toLowerCase():n}export function sanitize(t){return t.replace(/[&<>'"_]/g,"-")}export function log(t,n){console.log(`${t.languageId}: ${n}`)}export function createError(t,n){return new Error(`${t.languageId}: ${n}`)}export function substituteMatches(t,n,e,r,o){let i=null;return n.replace(/\$((\$)|(#)|(\d\d?)|[sS](\d\d?)|@(\w+))/g,(function(n,u,s,l,f,c,p,a,x){return empty(s)?empty(l)?!empty(f)&&f<r.length?fixCase(t,r[f]):!empty(p)&&t&&"string"==typeof t[p]?t[p]:(null===i&&(i=o.split("."),i.unshift(o)),!empty(c)&&c<i.length?fixCase(t,i[c]):""):fixCase(t,e):"$"}))}export function findRules(t,n){let e=n;for(;e&&e.length>0;){const n=t.tokenizer[e];if(n)return n;const r=e.lastIndexOf(".");e=r<0?null:e.substr(0,r)}return null}export function stateExists(t,n){let e=n;for(;e&&e.length>0;){if(t.stateNames[e])return!0;const n=e.lastIndexOf(".");e=n<0?null:e.substr(0,n)}return!1}