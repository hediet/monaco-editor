import"./standalone-tokens.css";import{Disposable,DisposableStore}from"../../../base/common/lifecycle.js";import{splitLines}from"../../../base/common/strings.js";import{FontMeasurements}from"../../browser/config/fontMeasurements.js";import{ICodeEditorService}from"../../browser/services/codeEditorService.js";import{DiffNavigator}from"../../browser/widget/diffNavigator.js";import{ApplyUpdateResult,ConfigurationChangedEvent,EditorOptions}from"../../common/config/editorOptions.js";import{BareFontInfo,FontInfo}from"../../common/config/fontInfo.js";import{EditorType}from"../../common/editorCommon.js";import{FindMatch,TextModelResolvedOptions}from"../../common/model.js";import*as languages from"../../common/languages.js";import{ILanguageConfigurationService}from"../../common/languages/languageConfigurationRegistry.js";import{NullState,nullTokenize}from"../../common/languages/nullTokenize.js";import{ILanguageService}from"../../common/languages/language.js";import{IModelService}from"../../common/services/model.js";import{createWebWorker as actualCreateWebWorker}from"../../browser/services/webWorker.js";import*as standaloneEnums from"../../common/standalone/standaloneEnums.js";import{Colorizer}from"./colorizer.js";import{createTextModel,StandaloneDiffEditor,StandaloneEditor}from"./standaloneCodeEditor.js";import{StandaloneKeybindingService,StandaloneServices}from"./standaloneServices.js";import{IStandaloneThemeService}from"../common/standaloneTheme.js";import{CommandsRegistry}from"../../../platform/commands/common/commands.js";import{IMarkerService}from"../../../platform/markers/common/markers.js";import{IKeybindingService}from"../../../platform/keybinding/common/keybinding.js";import{EditorCommand}from"../../browser/editorExtensions.js";import{MenuRegistry,MenuId}from"../../../platform/actions/common/actions.js";import{ContextKeyExpr}from"../../../platform/contextkey/common/contextkey.js";import{PLAINTEXT_LANGUAGE_ID}from"../../common/languages/modesRegistry.js";import{LineRange,LineRangeMapping,RangeMapping}from"../../common/diff/linesDiffComputer.js";export function create(e,n,o){return StandaloneServices.initialize(o||{}).createInstance(StandaloneEditor,e,n)}export function onDidCreateEditor(e){return StandaloneServices.get(ICodeEditorService).onCodeEditorAdd((n=>{e(n)}))}export function onDidCreateDiffEditor(e){return StandaloneServices.get(ICodeEditorService).onDiffEditorAdd((n=>{e(n)}))}export function getEditors(){return StandaloneServices.get(ICodeEditorService).listCodeEditors()}export function getDiffEditors(){return StandaloneServices.get(ICodeEditorService).listDiffEditors()}export function createDiffEditor(e,n,o){return StandaloneServices.initialize(o||{}).createInstance(StandaloneDiffEditor,e,n)}export function createDiffNavigator(e,n){return StandaloneServices.initialize({}).createInstance(DiffNavigator,e,n)}export function addCommand(e){if("string"!=typeof e.id||"function"!=typeof e.run)throw new Error("Invalid command descriptor, `id` and `run` are required properties!");return CommandsRegistry.registerCommand(e.id,e.run)}export function addEditorAction(e){if("string"!=typeof e.id||"string"!=typeof e.label||"function"!=typeof e.run)throw new Error("Invalid action descriptor, `id`, `label` and `run` are required properties!");const n=ContextKeyExpr.deserialize(e.precondition),o=new DisposableStore;if(o.add(CommandsRegistry.registerCommand(e.id,((o,...t)=>EditorCommand.runEditorCommand(o,t,n,((n,o,t)=>Promise.resolve(e.run(o,...t))))))),e.contextMenuGroupId){const t={command:{id:e.id,title:e.label},when:n,group:e.contextMenuGroupId,order:e.contextMenuOrder||0};o.add(MenuRegistry.appendMenuItem(MenuId.EditorContext,t))}if(Array.isArray(e.keybindings)){const t=StandaloneServices.get(IKeybindingService);if(t instanceof StandaloneKeybindingService){const r=ContextKeyExpr.and(n,ContextKeyExpr.deserialize(e.keybindingContext));o.add(t.addDynamicKeybindings(e.keybindings.map((n=>({keybinding:n,command:e.id,when:r})))))}else console.warn("Cannot add keybinding because the editor is configured with an unrecognized KeybindingService")}return o}export function addKeybindingRule(e){return addKeybindingRules([e])}export function addKeybindingRules(e){const n=StandaloneServices.get(IKeybindingService);return n instanceof StandaloneKeybindingService?n.addDynamicKeybindings(e.map((e=>({keybinding:e.keybinding,command:e.command,commandArgs:e.commandArgs,when:ContextKeyExpr.deserialize(e.when)})))):(console.warn("Cannot add keybinding because the editor is configured with an unrecognized KeybindingService"),Disposable.None)}export function createModel(e,n,o){const t=StandaloneServices.get(ILanguageService),r=t.getLanguageIdByMimeType(n)||n;return createTextModel(StandaloneServices.get(IModelService),t,e,r,o)}export function setModelLanguage(e,n){const o=StandaloneServices.get(ILanguageService),t=StandaloneServices.get(IModelService),r=o.getLanguageIdByMimeType(n)||n||PLAINTEXT_LANGUAGE_ID;t.setMode(e,o.createById(r))}export function setModelMarkers(e,n,o){e&&StandaloneServices.get(IMarkerService).changeOne(n,e.uri,o)}export function removeAllMarkers(e){StandaloneServices.get(IMarkerService).changeAll(e,[])}export function getModelMarkers(e){return StandaloneServices.get(IMarkerService).read(e)}export function onDidChangeMarkers(e){return StandaloneServices.get(IMarkerService).onMarkerChanged(e)}export function getModel(e){return StandaloneServices.get(IModelService).getModel(e)}export function getModels(){return StandaloneServices.get(IModelService).getModels()}export function onDidCreateModel(e){return StandaloneServices.get(IModelService).onModelAdded(e)}export function onWillDisposeModel(e){return StandaloneServices.get(IModelService).onModelRemoved(e)}export function onDidChangeModelLanguage(e){return StandaloneServices.get(IModelService).onModelLanguageChanged((n=>{e({model:n.model,oldLanguage:n.oldLanguageId})}))}export function createWebWorker(e){return actualCreateWebWorker(StandaloneServices.get(IModelService),StandaloneServices.get(ILanguageConfigurationService),e)}export function colorizeElement(e,n){const o=StandaloneServices.get(ILanguageService),t=StandaloneServices.get(IStandaloneThemeService);return t.registerEditorContainer(e),Colorizer.colorizeElement(t,o,e,n)}export function colorize(e,n,o){const t=StandaloneServices.get(ILanguageService);return StandaloneServices.get(IStandaloneThemeService).registerEditorContainer(document.body),Colorizer.colorize(t,e,n,o)}export function colorizeModelLine(e,n,o=4){return StandaloneServices.get(IStandaloneThemeService).registerEditorContainer(document.body),Colorizer.colorizeModelLine(e,n,o)}function getSafeTokenizationSupport(e){return languages.TokenizationRegistry.get(e)||{getInitialState:()=>NullState,tokenize:(n,o,t)=>nullTokenize(e,t)}}export function tokenize(e,n){languages.TokenizationRegistry.getOrCreate(n);const o=getSafeTokenizationSupport(n),t=splitLines(e),r=[];let i=o.getInitialState();for(let e=0,n=t.length;e<n;e++){const n=t[e],a=o.tokenize(n,!0,i);r[e]=a.tokens,i=a.endState}return r}export function defineTheme(e,n){StandaloneServices.get(IStandaloneThemeService).defineTheme(e,n)}export function setTheme(e){StandaloneServices.get(IStandaloneThemeService).setTheme(e)}export function remeasureFonts(){FontMeasurements.clearAllFontInfos()}export function registerCommand(e,n){return CommandsRegistry.registerCommand({id:e,handler:n})}export function createMonacoEditorAPI(){return{create,getEditors,getDiffEditors,onDidCreateEditor,onDidCreateDiffEditor,createDiffEditor,createDiffNavigator,addCommand,addEditorAction,addKeybindingRule,addKeybindingRules,createModel,setModelLanguage,setModelMarkers,getModelMarkers,removeAllMarkers,onDidChangeMarkers,getModels,getModel,onDidCreateModel,onWillDisposeModel,onDidChangeModelLanguage,createWebWorker,colorizeElement,colorize,colorizeModelLine,tokenize,defineTheme,setTheme,remeasureFonts,registerCommand,AccessibilitySupport:standaloneEnums.AccessibilitySupport,ContentWidgetPositionPreference:standaloneEnums.ContentWidgetPositionPreference,CursorChangeReason:standaloneEnums.CursorChangeReason,DefaultEndOfLine:standaloneEnums.DefaultEndOfLine,EditorAutoIndentStrategy:standaloneEnums.EditorAutoIndentStrategy,EditorOption:standaloneEnums.EditorOption,EndOfLinePreference:standaloneEnums.EndOfLinePreference,EndOfLineSequence:standaloneEnums.EndOfLineSequence,MinimapPosition:standaloneEnums.MinimapPosition,MouseTargetType:standaloneEnums.MouseTargetType,OverlayWidgetPositionPreference:standaloneEnums.OverlayWidgetPositionPreference,OverviewRulerLane:standaloneEnums.OverviewRulerLane,RenderLineNumbersType:standaloneEnums.RenderLineNumbersType,RenderMinimap:standaloneEnums.RenderMinimap,ScrollbarVisibility:standaloneEnums.ScrollbarVisibility,ScrollType:standaloneEnums.ScrollType,TextEditorCursorBlinkingStyle:standaloneEnums.TextEditorCursorBlinkingStyle,TextEditorCursorStyle:standaloneEnums.TextEditorCursorStyle,TrackedRangeStickiness:standaloneEnums.TrackedRangeStickiness,WrappingIndent:standaloneEnums.WrappingIndent,InjectedTextCursorStops:standaloneEnums.InjectedTextCursorStops,PositionAffinity:standaloneEnums.PositionAffinity,ConfigurationChangedEvent,BareFontInfo,FontInfo,TextModelResolvedOptions,FindMatch,ApplyUpdateResult,LineRange,LineRangeMapping,RangeMapping,EditorType,EditorOptions}}