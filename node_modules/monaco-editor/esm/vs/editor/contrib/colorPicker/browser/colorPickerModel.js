import{Emitter}from"../../../../base/common/event.js";export class ColorPickerModel{get color(){return this._color}set color(t){this._color.equals(t)||(this._color=t,this._onDidChangeColor.fire(t))}get presentation(){return this.colorPresentations[this.presentationIndex]}get colorPresentations(){return this._colorPresentations}set colorPresentations(t){this._colorPresentations=t,this.presentationIndex>t.length-1&&(this.presentationIndex=0),this._onDidChangePresentation.fire(this.presentation)}constructor(t,e,o){this.presentationIndex=o,this._onColorFlushed=new Emitter,this.onColorFlushed=this._onColorFlushed.event,this._onDidChangeColor=new Emitter,this.onDidChangeColor=this._onDidChangeColor.event,this._onDidChangePresentation=new Emitter,this.onDidChangePresentation=this._onDidChangePresentation.event,this.originalColor=t,this._color=t,this._colorPresentations=e}selectNextColorPresentation(){this.presentationIndex=(this.presentationIndex+1)%this.colorPresentations.length,this.flushColor(),this._onDidChangePresentation.fire(this.presentation)}guessColorPresentation(t,e){let o=-1;for(let t=0;t<this.colorPresentations.length;t++)if(e.toLowerCase()===this.colorPresentations[t].label){o=t;break}if(-1===o){const t=e.split("(")[0].toLowerCase();for(let e=0;e<this.colorPresentations.length;e++)if(this.colorPresentations[e].label.toLowerCase().startsWith(t)){o=e;break}}-1!==o&&o!==this.presentationIndex&&(this.presentationIndex=o,this._onDidChangePresentation.fire(this.presentation))}flushColor(){this._onColorFlushed.fire(this._color)}}