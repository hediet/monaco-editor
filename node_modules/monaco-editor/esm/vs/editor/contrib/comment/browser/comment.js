import{KeyChord}from"../../../../base/common/keyCodes.js";import{EditorAction,registerEditorAction}from"../../../browser/editorExtensions.js";import{Range}from"../../../common/core/range.js";import{EditorContextKeys}from"../../../common/editorContextKeys.js";import{ILanguageConfigurationService}from"../../../common/languages/languageConfigurationRegistry.js";import{BlockCommentCommand}from"./blockCommentCommand.js";import{LineCommentCommand}from"./lineCommentCommand.js";import*as nls from"../../../../nls.js";import{MenuId}from"../../../../platform/actions/common/actions.js";class CommentLineAction extends EditorAction{constructor(e,o){super(o),this._type=e}run(e,o){const t=e.get(ILanguageConfigurationService);if(!o.hasModel())return;const n=[],i=o.getModel().getOptions(),m=o.getOption(20),r=o.getSelections().map(((e,o)=>({selection:e,index:o,ignoreFirstLine:!1})));r.sort(((e,o)=>Range.compareRangesUsingStarts(e.selection,o.selection)));let s=r[0];for(let e=1;e<r.length;e++){const o=r[e];s.selection.endLineNumber===o.selection.startLineNumber&&(s.index<o.index?o.ignoreFirstLine=!0:(s.ignoreFirstLine=!0,s=o))}for(const e of r)n.push(new LineCommentCommand(t,e.selection,i.tabSize,this._type,m.insertSpace,m.ignoreEmptyLines,e.ignoreFirstLine));o.pushUndoStop(),o.executeCommands(this.id,n),o.pushUndoStop()}}class ToggleCommentLineAction extends CommentLineAction{constructor(){super(0,{id:"editor.action.commentLine",label:nls.localize("comment.line","Toggle Line Comment"),alias:"Toggle Line Comment",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:2133,weight:100},menuOpts:{menuId:MenuId.MenubarEditMenu,group:"5_insert",title:nls.localize({key:"miToggleLineComment",comment:["&& denotes a mnemonic"]},"&&Toggle Line Comment"),order:1}})}}class AddLineCommentAction extends CommentLineAction{constructor(){super(1,{id:"editor.action.addCommentLine",label:nls.localize("comment.line.add","Add Line Comment"),alias:"Add Line Comment",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:KeyChord(2089,2081),weight:100}})}}class RemoveLineCommentAction extends CommentLineAction{constructor(){super(2,{id:"editor.action.removeCommentLine",label:nls.localize("comment.line.remove","Remove Line Comment"),alias:"Remove Line Comment",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:KeyChord(2089,2099),weight:100}})}}class BlockCommentAction extends EditorAction{constructor(){super({id:"editor.action.blockComment",label:nls.localize("comment.block","Toggle Block Comment"),alias:"Toggle Block Comment",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:1567,linux:{primary:3103},weight:100},menuOpts:{menuId:MenuId.MenubarEditMenu,group:"5_insert",title:nls.localize({key:"miToggleBlockComment",comment:["&& denotes a mnemonic"]},"Toggle &&Block Comment"),order:2}})}run(e,o){const t=e.get(ILanguageConfigurationService);if(!o.hasModel())return;const n=o.getOption(20),i=[],m=o.getSelections();for(const e of m)i.push(new BlockCommentCommand(e,n.insertSpace,t));o.pushUndoStop(),o.executeCommands(this.id,i),o.pushUndoStop()}}registerEditorAction(ToggleCommentLineAction),registerEditorAction(AddLineCommentAction),registerEditorAction(RemoveLineCommentAction),registerEditorAction(BlockCommentAction);