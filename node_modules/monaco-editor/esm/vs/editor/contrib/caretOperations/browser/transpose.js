import{EditorAction,registerEditorAction}from"../../../browser/editorExtensions.js";import{ReplaceCommand}from"../../../common/commands/replaceCommand.js";import{MoveOperations}from"../../../common/cursor/cursorMoveOperations.js";import{Range}from"../../../common/core/range.js";import{EditorContextKeys}from"../../../common/editorContextKeys.js";import*as nls from"../../../../nls.js";class TransposeLettersAction extends EditorAction{constructor(){super({id:"editor.action.transposeLetters",label:nls.localize("transposeLetters.label","Transpose Letters"),alias:"Transpose Letters",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.textInputFocus,primary:0,mac:{primary:306},weight:100}})}run(o,t){if(!t.hasModel())return;const e=t.getModel(),n=[],s=t.getSelections();for(const o of s){if(!o.isEmpty())continue;const t=o.startLineNumber,s=o.startColumn,r=e.getLineMaxColumn(t);if(1===t&&(1===s||2===s&&2===r))continue;const i=s===r?o.getPosition():MoveOperations.rightPosition(e,o.getPosition().lineNumber,o.getPosition().column),a=MoveOperations.leftPosition(e,i),m=MoveOperations.leftPosition(e,a),c=e.getValueInRange(Range.fromPositions(m,a)),p=e.getValueInRange(Range.fromPositions(a,i)),l=Range.fromPositions(m,i);n.push(new ReplaceCommand(l,p+c))}n.length>0&&(t.pushUndoStop(),t.executeCommands(this.id,n),t.pushUndoStop())}}registerEditorAction(TransposeLettersAction);