import{EditOperation}from"../../../common/core/editOperation.js";import{Range}from"../../../common/core/range.js";class SortLinesCommand{static getCollator(){return SortLinesCommand._COLLATOR||(SortLinesCommand._COLLATOR=new Intl.Collator),SortLinesCommand._COLLATOR}constructor(e,t){this.selection=e,this.descending=t,this.selectionId=null}getEditOperations(e,t){const n=sortLines(e,this.selection,this.descending);n&&t.addEditOperation(n.range,n.text),this.selectionId=t.trackSelection(this.selection)}computeCursorState(e,t){return t.getTrackedSelection(this.selectionId)}static canRun(e,t,n){if(null===e)return!1;const r=getSortData(e,t,n);if(!r)return!1;for(let e=0,t=r.before.length;e<t;e++)if(r.before[e]!==r.after[e])return!0;return!1}}SortLinesCommand._COLLATOR=null;export{SortLinesCommand};function getSortData(e,t,n){const r=t.startLineNumber;let o=t.endLineNumber;if(1===t.endColumn&&o--,r>=o)return null;const i=[];for(let t=r;t<=o;t++)i.push(e.getLineContent(t));let s=i.slice(0);return s.sort(SortLinesCommand.getCollator().compare),!0===n&&(s=s.reverse()),{startLineNumber:r,endLineNumber:o,before:i,after:s}}function sortLines(e,t,n){const r=getSortData(e,t,n);return r?EditOperation.replace(new Range(r.startLineNumber,1,r.endLineNumber,e.getLineMaxColumn(r.endLineNumber)),r.after.join("\n")):null}