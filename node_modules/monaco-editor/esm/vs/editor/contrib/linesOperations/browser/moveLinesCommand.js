var __decorate=this&&this.__decorate||function(e,n,t,i){var o,s=arguments.length,r=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,t,i);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(r=(s<3?o(r):s>3?o(n,t,r):o(n,t))||r);return s>3&&r&&Object.defineProperty(n,t,r),r},__param=this&&this.__param||function(e,n){return function(t,i){n(t,i,e)}};import*as strings from"../../../../base/common/strings.js";import{ShiftCommand}from"../../../common/commands/shiftCommand.js";import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";import{IndentAction}from"../../../common/languages/languageConfiguration.js";import{ILanguageConfigurationService}from"../../../common/languages/languageConfigurationRegistry.js";import*as indentUtils from"../../indentation/browser/indentUtils.js";import{getGoodIndentForLine,getIndentMetadata}from"../../../common/languages/autoIndent.js";import{getEnterAction}from"../../../common/languages/enterAction.js";let MoveLinesCommand=class{constructor(e,n,t,i){this._languageConfigurationService=i,this._selection=e,this._isMovingDown=n,this._autoIndent=t,this._selectionId=null,this._moveEndLineSelectionShrink=!1}getEditOperations(e,n){const t=e.getLineCount();if(this._isMovingDown&&this._selection.endLineNumber===t)return void(this._selectionId=n.trackSelection(this._selection));if(!this._isMovingDown&&1===this._selection.startLineNumber)return void(this._selectionId=n.trackSelection(this._selection));this._moveEndPositionDown=!1;let i=this._selection;i.startLineNumber<i.endLineNumber&&1===i.endColumn&&(this._moveEndPositionDown=!0,i=i.setEndPosition(i.endLineNumber-1,e.getLineMaxColumn(i.endLineNumber-1)));const{tabSize:o,indentSize:s,insertSpaces:r}=e.getOptions(),a=this.buildIndentConverter(o,s,r),g={tokenization:{getLineTokens:n=>e.tokenization.getLineTokens(n),getLanguageId:()=>e.getLanguageId(),getLanguageIdAtPosition:(n,t)=>e.getLanguageIdAtPosition(n,t)},getLineContent:null};if(i.startLineNumber===i.endLineNumber&&1===e.getLineMaxColumn(i.startLineNumber)){const t=i.startLineNumber,o=this._isMovingDown?t+1:t-1;1===e.getLineMaxColumn(o)?n.addEditOperation(new Range(1,1,1,1),null):(n.addEditOperation(new Range(t,1,t,1),e.getLineContent(o)),n.addEditOperation(new Range(o,1,o,e.getLineMaxColumn(o)),null)),i=new Selection(o,1,o,1)}else{let t,s;if(this._isMovingDown){t=i.endLineNumber+1,s=e.getLineContent(t),n.addEditOperation(new Range(t-1,e.getLineMaxColumn(t-1),t,e.getLineMaxColumn(t)),null);let d=s;if(this.shouldAutoIndent(e,i)){const u=this.matchEnterRule(e,a,o,t,i.startLineNumber-1);if(null!==u){const n=strings.getLeadingWhitespace(e.getLineContent(t)),i=u+indentUtils.getSpaceCnt(n,o),a=indentUtils.generateIndent(i,o,r);d=a+this.trimLeft(s)}else{g.getLineContent=n=>n===i.startLineNumber?e.getLineContent(t):e.getLineContent(n);const n=getGoodIndentForLine(this._autoIndent,g,e.getLanguageIdAtPosition(t,1),i.startLineNumber,a,this._languageConfigurationService);if(null!==n){const i=strings.getLeadingWhitespace(e.getLineContent(t)),a=indentUtils.getSpaceCnt(n,o);if(a!==indentUtils.getSpaceCnt(i,o)){const e=indentUtils.generateIndent(a,o,r);d=e+this.trimLeft(s)}}}n.addEditOperation(new Range(i.startLineNumber,1,i.startLineNumber,1),d+"\n");const l=this.matchEnterRuleMovingDown(e,a,o,i.startLineNumber,t,d);if(null!==l)0!==l&&this.getIndentEditsOfMovingBlock(e,n,i,o,r,l);else{g.getLineContent=n=>n===i.startLineNumber?d:n>=i.startLineNumber+1&&n<=i.endLineNumber+1?e.getLineContent(n-1):e.getLineContent(n);const s=getGoodIndentForLine(this._autoIndent,g,e.getLanguageIdAtPosition(t,1),i.startLineNumber+1,a,this._languageConfigurationService);if(null!==s){const t=strings.getLeadingWhitespace(e.getLineContent(i.startLineNumber)),a=indentUtils.getSpaceCnt(s,o),g=indentUtils.getSpaceCnt(t,o);if(a!==g){const t=a-g;this.getIndentEditsOfMovingBlock(e,n,i,o,r,t)}}}}else n.addEditOperation(new Range(i.startLineNumber,1,i.startLineNumber,1),d+"\n")}else if(t=i.startLineNumber-1,s=e.getLineContent(t),n.addEditOperation(new Range(t,1,t+1,1),null),n.addEditOperation(new Range(i.endLineNumber,e.getLineMaxColumn(i.endLineNumber),i.endLineNumber,e.getLineMaxColumn(i.endLineNumber)),"\n"+s),this.shouldAutoIndent(e,i)){g.getLineContent=n=>n===t?e.getLineContent(i.startLineNumber):e.getLineContent(n);const s=this.matchEnterRule(e,a,o,i.startLineNumber,i.startLineNumber-2);if(null!==s)0!==s&&this.getIndentEditsOfMovingBlock(e,n,i,o,r,s);else{const s=getGoodIndentForLine(this._autoIndent,g,e.getLanguageIdAtPosition(i.startLineNumber,1),t,a,this._languageConfigurationService);if(null!==s){const t=strings.getLeadingWhitespace(e.getLineContent(i.startLineNumber)),a=indentUtils.getSpaceCnt(s,o),g=indentUtils.getSpaceCnt(t,o);if(a!==g){const t=a-g;this.getIndentEditsOfMovingBlock(e,n,i,o,r,t)}}}}}this._selectionId=n.trackSelection(i)}buildIndentConverter(e,n,t){return{shiftIndent:i=>ShiftCommand.shiftIndent(i,i.length+1,e,n,t),unshiftIndent:i=>ShiftCommand.unshiftIndent(i,i.length+1,e,n,t)}}parseEnterResult(e,n,t,i,o){if(o){let s=o.indentation;o.indentAction===IndentAction.None||o.indentAction===IndentAction.Indent?s=o.indentation+o.appendText:o.indentAction===IndentAction.IndentOutdent?s=o.indentation:o.indentAction===IndentAction.Outdent&&(s=n.unshiftIndent(o.indentation)+o.appendText);const r=e.getLineContent(i);if(this.trimLeft(r).indexOf(this.trimLeft(s))>=0){const o=strings.getLeadingWhitespace(e.getLineContent(i));let r=strings.getLeadingWhitespace(s);const a=getIndentMetadata(e,i,this._languageConfigurationService);return null!==a&&2&a&&(r=n.unshiftIndent(r)),indentUtils.getSpaceCnt(r,t)-indentUtils.getSpaceCnt(o,t)}}return null}matchEnterRuleMovingDown(e,n,t,i,o,s){if(strings.lastNonWhitespaceIndex(s)>=0){const s=e.getLineMaxColumn(o),r=getEnterAction(this._autoIndent,e,new Range(o,s,o,s),this._languageConfigurationService);return this.parseEnterResult(e,n,t,i,r)}{let o=i-1;for(;o>=1;){const n=e.getLineContent(o);if(strings.lastNonWhitespaceIndex(n)>=0)break;o--}if(o<1||i>e.getLineCount())return null;const s=e.getLineMaxColumn(o),r=getEnterAction(this._autoIndent,e,new Range(o,s,o,s),this._languageConfigurationService);return this.parseEnterResult(e,n,t,i,r)}}matchEnterRule(e,n,t,i,o,s){let r=o;for(;r>=1;){let n;if(n=r===o&&void 0!==s?s:e.getLineContent(r),strings.lastNonWhitespaceIndex(n)>=0)break;r--}if(r<1||i>e.getLineCount())return null;const a=e.getLineMaxColumn(r),g=getEnterAction(this._autoIndent,e,new Range(r,a,r,a),this._languageConfigurationService);return this.parseEnterResult(e,n,t,i,g)}trimLeft(e){return e.replace(/^\s+/,"")}shouldAutoIndent(e,n){if(this._autoIndent<4)return!1;if(!e.tokenization.isCheapToTokenize(n.startLineNumber))return!1;const t=e.getLanguageIdAtPosition(n.startLineNumber,1);return t===e.getLanguageIdAtPosition(n.endLineNumber,1)&&null!==this._languageConfigurationService.getLanguageConfiguration(t).indentRulesSupport}getIndentEditsOfMovingBlock(e,n,t,i,o,s){for(let r=t.startLineNumber;r<=t.endLineNumber;r++){const a=e.getLineContent(r),g=strings.getLeadingWhitespace(a),d=indentUtils.getSpaceCnt(g,i)+s,u=indentUtils.generateIndent(d,i,o);u!==g&&(n.addEditOperation(new Range(r,1,r,g.length+1),u),r===t.endLineNumber&&t.endColumn<=g.length+1&&""===u&&(this._moveEndLineSelectionShrink=!0))}}computeCursorState(e,n){let t=n.getTrackedSelection(this._selectionId);return this._moveEndPositionDown&&(t=t.setEndPosition(t.endLineNumber+1,1)),this._moveEndLineSelectionShrink&&t.startLineNumber<t.endLineNumber&&(t=t.setEndPosition(t.endLineNumber,2)),t}};MoveLinesCommand=__decorate([__param(3,ILanguageConfigurationService)],MoveLinesCommand);export{MoveLinesCommand};