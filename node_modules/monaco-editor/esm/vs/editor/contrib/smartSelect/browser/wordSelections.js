import{isLowerAsciiLetter,isUpperAsciiLetter}from"../../../../base/common/strings.js";import{Range}from"../../../common/core/range.js";export class WordSelectionRangeProvider{provideSelectionRanges(e,n){const r=[];for(const i of n){const n=[];r.push(n),this._addInWordRanges(n,e,i),this._addWordRanges(n,e,i),this._addWhitespaceLine(n,e,i),n.push({range:e.getFullModelRange()})}return r}_addInWordRanges(e,n,r){const i=n.getWordAtPosition(r);if(!i)return;const{word:t,startColumn:o}=i,s=r.column-o;let a=s,c=s,d=0;for(;a>=0;a--){const e=t.charCodeAt(a);if(a!==s&&(95===e||45===e))break;if(isLowerAsciiLetter(e)&&isUpperAsciiLetter(d))break;d=e}for(a+=1;c<t.length;c++){const e=t.charCodeAt(c);if(isUpperAsciiLetter(e)&&isLowerAsciiLetter(d))break;if(95===e||45===e)break;d=e}a<c&&e.push({range:new Range(r.lineNumber,o+a,r.lineNumber,o+c)})}_addWordRanges(e,n,r){const i=n.getWordAtPosition(r);i&&e.push({range:new Range(r.lineNumber,i.startColumn,r.lineNumber,i.endColumn)})}_addWhitespaceLine(e,n,r){n.getLineLength(r.lineNumber)>0&&0===n.getLineFirstNonWhitespaceColumn(r.lineNumber)&&0===n.getLineLastNonWhitespaceColumn(r.lineNumber)&&e.push({range:new Range(r.lineNumber,1,r.lineNumber,n.getLineMaxColumn(r.lineNumber))})}}