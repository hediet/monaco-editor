import{isNonEmptyArray}from"../../../../base/common/arrays.js";import{DisposableStore}from"../../../../base/common/lifecycle.js";import{CharacterSet}from"../../../common/core/characterClassifier.js";export class CommitCharacterController{constructor(t,s,e,i){this._disposables=new DisposableStore,this._disposables.add(e.onDidSuggest((t=>{0===t.completionModel.items.length&&this.reset()}))),this._disposables.add(e.onDidCancel((t=>{this.reset()}))),this._disposables.add(s.onDidShow((()=>this._onItem(s.getFocusedItem())))),this._disposables.add(s.onDidFocus(this._onItem,this)),this._disposables.add(s.onDidHide(this.reset,this)),this._disposables.add(t.onWillType((o=>{if(this._active&&!s.isFrozen()&&0!==e.state){const s=o.charCodeAt(o.length-1);this._active.acceptCharacters.has(s)&&t.getOption(0)&&i(this._active.item)}})))}_onItem(t){if(!t||!isNonEmptyArray(t.item.completion.commitCharacters))return void this.reset();if(this._active&&this._active.item.item===t.item)return;const s=new CharacterSet;for(const e of t.item.completion.commitCharacters)e.length>0&&s.add(e.charCodeAt(0));this._active={acceptCharacters:s,item:t}}reset(){this._active=void 0}dispose(){this._disposables.dispose()}}