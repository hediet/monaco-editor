import{computeIndentLevel}from"../../../common/model/utils.js";import{FoldingRegions,MAX_LINE_NUMBER}from"./foldingRanges.js";const MAX_FOLDING_REGIONS_FOR_INDENT_DEFAULT=5e3,ID_INDENT_PROVIDER="indent";export class IndentRangeProvider{constructor(e,n,t){this.editorModel=e,this.languageConfigurationService=n,this.foldingRangesLimit=t,this.id="indent"}dispose(){}compute(e){const n=this.languageConfigurationService.getLanguageConfiguration(this.editorModel.getLanguageId()).foldingRules,t=n&&!!n.offSide,i=n&&n.markers;return Promise.resolve(computeRanges(this.editorModel,t,i,this.foldingRangesLimit))}}class RangesCollector{constructor(e){this._startIndexes=[],this._endIndexes=[],this._indentOccurrences=[],this._length=0,this._foldingRangesLimit=e}insertFirst(e,n,t){if(e>MAX_LINE_NUMBER||n>MAX_LINE_NUMBER)return;const i=this._length;this._startIndexes[i]=e,this._endIndexes[i]=n,this._length++,t<1e3&&(this._indentOccurrences[t]=(this._indentOccurrences[t]||0)+1)}toIndentRanges(e){const n=this._foldingRangesLimit.limit;if(this._length<=n){this._foldingRangesLimit.report({limited:!1,computed:this._length});const e=new Uint32Array(this._length),n=new Uint32Array(this._length);for(let t=this._length-1,i=0;t>=0;t--,i++)e[i]=this._startIndexes[t],n[i]=this._endIndexes[t];return new FoldingRegions(e,n)}{this._foldingRangesLimit.report({limited:n,computed:this._length});let t=0,i=this._indentOccurrences.length;for(let e=0;e<this._indentOccurrences.length;e++){const s=this._indentOccurrences[e];if(s){if(s+t>n){i=e;break}t+=s}}const s=e.getOptions().tabSize,o=new Uint32Array(n),r=new Uint32Array(n);for(let d=this._length-1,g=0;d>=0;d--){const l=this._startIndexes[d],h=e.getLineContent(l),c=computeIndentLevel(h,s);(c<i||c===i&&t++<n)&&(o[g]=l,r[g]=this._endIndexes[d],g++)}return new FoldingRegions(o,r)}}}const foldingRangesLimitDefault={limit:5e3,report:()=>{}};export function computeRanges(e,n,t,i=foldingRangesLimitDefault){const s=e.getOptions().tabSize,o=new RangesCollector(i);let r;t&&(r=new RegExp(`(${t.start.source})|(?:${t.end.source})`));const d=[],g=e.getLineCount()+1;d.push({indent:-1,endAbove:g,line:g});for(let t=e.getLineCount();t>0;t--){const i=e.getLineContent(t),g=computeIndentLevel(i,s);let l,h=d[d.length-1];if(-1!==g){if(r&&(l=i.match(r))){if(!l[1]){d.push({indent:-2,endAbove:t,line:t});continue}{let e=d.length-1;for(;e>0&&-2!==d[e].indent;)e--;if(e>0){d.length=e+1,h=d[e],o.insertFirst(t,h.line,g),h.line=t,h.indent=g,h.endAbove=t;continue}}}if(h.indent>g){do{d.pop(),h=d[d.length-1]}while(h.indent>g);const e=h.endAbove-1;e-t>=1&&o.insertFirst(t,e,g)}h.indent===g?h.endAbove=t:d.push({indent:g,endAbove:t,line:t})}else n&&(h.endAbove=t)}return o.toIndentRanges(e)}