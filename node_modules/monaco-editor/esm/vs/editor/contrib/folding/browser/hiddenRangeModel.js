import{findFirstInSorted}from"../../../../base/common/arrays.js";import{Emitter}from"../../../../base/common/event.js";import{Range}from"../../../common/core/range.js";import{countEOL}from"../../../common/core/eolCounter.js";export class HiddenRangeModel{get onDidChange(){return this._updateEventEmitter.event}get hiddenRanges(){return this._hiddenRanges}constructor(e){this._updateEventEmitter=new Emitter,this._hasLineChanges=!1,this._foldingModel=e,this._foldingModelListener=e.onDidChange((e=>this.updateHiddenRanges())),this._hiddenRanges=[],e.regions.length&&this.updateHiddenRanges()}notifyChangeModelContent(e){this._hiddenRanges.length&&!this._hasLineChanges&&(this._hasLineChanges=e.changes.some((e=>e.range.endLineNumber!==e.range.startLineNumber||0!==countEOL(e.text)[0])))}updateHiddenRanges(){let e=!1;const n=[];let t=0,i=0,s=Number.MAX_VALUE,d=-1;const h=this._foldingModel.regions;for(;t<h.length;t++){if(!h.isCollapsed(t))continue;const r=h.getStartLineNumber(t)+1,o=h.getEndLineNumber(t);s<=r&&o<=d||(!e&&i<this._hiddenRanges.length&&this._hiddenRanges[i].startLineNumber===r&&this._hiddenRanges[i].endLineNumber===o?(n.push(this._hiddenRanges[i]),i++):(e=!0,n.push(new Range(r,1,o,1))),s=r,d=o)}(this._hasLineChanges||e||i<this._hiddenRanges.length)&&this.applyHiddenRanges(n)}applyHiddenRanges(e){this._hiddenRanges=e,this._hasLineChanges=!1,this._updateEventEmitter.fire(e)}hasRanges(){return this._hiddenRanges.length>0}isHidden(e){return null!==findRange(this._hiddenRanges,e)}adjustSelections(e){let n=!1;const t=this._foldingModel.textModel;let i=null;const s=e=>(i&&isInside(e,i)||(i=findRange(this._hiddenRanges,e)),i?i.startLineNumber-1:null);for(let i=0,d=e.length;i<d;i++){let d=e[i];const h=s(d.startLineNumber);h&&(d=d.setStartPosition(h,t.getLineMaxColumn(h)),n=!0);const r=s(d.endLineNumber);r&&(d=d.setEndPosition(r,t.getLineMaxColumn(r)),n=!0),e[i]=d}return n}dispose(){this.hiddenRanges.length>0&&(this._hiddenRanges=[],this._updateEventEmitter.fire(this._hiddenRanges)),this._foldingModelListener&&(this._foldingModelListener.dispose(),this._foldingModelListener=null)}}function isInside(e,n){return e>=n.startLineNumber&&e<=n.endLineNumber}function findRange(e,n){const t=findFirstInSorted(e,(e=>n<e.startLineNumber))-1;return t>=0&&e[t].endLineNumber>=n?e[t]:null}