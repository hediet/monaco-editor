import{Emitter}from"../../../../base/common/event.js";import{Disposable}from"../../../../base/common/lifecycle.js";import{applyEdits}from"./utils.js";export class GhostText{constructor(t,e,s=0){this.lineNumber=t,this.parts=e,this.additionalReservedLineCount=s}renderForScreenReader(t){if(0===this.parts.length)return"";const e=this.parts[this.parts.length-1],s=t.substr(0,e.column-1);return applyEdits(s,this.parts.map((t=>({range:{startLineNumber:1,endLineNumber:1,startColumn:t.column,endColumn:t.column},text:t.lines.join("\n")})))).substring(this.parts[0].column-1)}isEmpty(){return this.parts.every((t=>0===t.lines.length))}}export class GhostTextPart{constructor(t,e,s){this.column=t,this.lines=e,this.preview=s}}export class GhostTextReplacement{constructor(t,e,s,i,n=0){this.lineNumber=t,this.columnStart=e,this.length=s,this.newLines=i,this.additionalReservedLineCount=n,this.parts=[new GhostTextPart(this.columnStart+this.length,this.newLines,!1)]}renderForScreenReader(t){return this.newLines.join("\n")}}export class BaseGhostTextWidgetModel extends Disposable{constructor(t){super(),this.editor=t,this._expanded=void 0,this.onDidChangeEmitter=new Emitter,this.onDidChange=this.onDidChangeEmitter.event,this._register(t.onDidChangeConfiguration((t=>{t.hasChanged(112)&&void 0===this._expanded&&this.onDidChangeEmitter.fire()})))}setExpanded(t){this._expanded=!0,this.onDidChangeEmitter.fire()}}