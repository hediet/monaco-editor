import"./decorations.css";import{DynamicViewOverlay}from"../../view/dynamicViewOverlay.js";import{Range}from"../../../common/core/range.js";import{HorizontalRange}from"../../view/renderingContext.js";export class DecorationsOverlay extends DynamicViewOverlay{constructor(e){super(),this._context=e;const t=this._context.configuration.options;this._lineHeight=t.get(63),this._typicalHalfwidthCharacterWidth=t.get(47).typicalHalfwidthCharacterWidth,this._renderResult=null,this._context.addEventHandler(this)}dispose(){this._context.removeEventHandler(this),this._renderResult=null,super.dispose()}onConfigurationChanged(e){const t=this._context.configuration.options;return this._lineHeight=t.get(63),this._typicalHalfwidthCharacterWidth=t.get(47).typicalHalfwidthCharacterWidth,!0}onDecorationsChanged(e){return!0}onFlushed(e){return!0}onLinesChanged(e){return!0}onLinesDeleted(e){return!0}onLinesInserted(e){return!0}onScrollChanged(e){return e.scrollTopChanged||e.scrollWidthChanged}onZonesChanged(e){return!0}prepareRender(e){const t=e.getDecorationsInViewport();let n=[],i=0;for(let e=0,r=t.length;e<r;e++){const r=t[e];r.options.className&&(n[i++]=r)}n=n.sort(((e,t)=>{if(e.options.zIndex<t.options.zIndex)return-1;if(e.options.zIndex>t.options.zIndex)return 1;const n=e.options.className,i=t.options.className;return n<i?-1:n>i?1:Range.compareRangesUsingStarts(e.range,t.range)}));const r=e.visibleRange.startLineNumber,o=e.visibleRange.endLineNumber,s=[];for(let e=r;e<=o;e++)s[e-r]="";this._renderWholeLineDecorations(e,n,s),this._renderNormalDecorations(e,n,s),this._renderResult=s}_renderWholeLineDecorations(e,t,n){const i=String(this._lineHeight),r=e.visibleRange.startLineNumber,o=e.visibleRange.endLineNumber;for(let e=0,s=t.length;e<s;e++){const s=t[e];if(!s.options.isWholeLine)continue;const a='<div class="cdr '+s.options.className+'" style="left:0;width:100%;height:'+i+'px;"></div>',l=Math.max(s.range.startLineNumber,r),h=Math.min(s.range.endLineNumber,o);for(let e=l;e<=h;e++)n[e-r]+=a}}_renderNormalDecorations(e,t,n){const i=String(this._lineHeight),r=e.visibleRange.startLineNumber;let o=null,s=!1,a=null;for(let l=0,h=t.length;l<h;l++){const h=t[l];if(h.options.isWholeLine)continue;const c=h.options.className,d=Boolean(h.options.showIfCollapsed);let g=h.range;d&&1===g.endColumn&&g.endLineNumber!==g.startLineNumber&&(g=new Range(g.startLineNumber,g.startColumn,g.endLineNumber-1,this._context.viewModel.getLineMaxColumn(g.endLineNumber-1))),o===c&&s===d&&Range.areIntersectingOrTouching(a,g)?a=Range.plusRange(a,g):(null!==o&&this._renderNormalDecoration(e,a,o,s,i,r,n),o=c,s=d,a=g)}null!==o&&this._renderNormalDecoration(e,a,o,s,i,r,n)}_renderNormalDecoration(e,t,n,i,r,o,s){const a=e.linesVisibleRangesForRange(t,"findMatch"===n);if(a)for(let e=0,t=a.length;e<t;e++){const t=a[e];if(t.outsideRenderedLine)continue;const l=t.lineNumber-o;if(i&&1===t.ranges.length){const e=t.ranges[0];if(e.width<this._typicalHalfwidthCharacterWidth){const n=Math.round(e.left+e.width/2),i=Math.max(0,Math.round(n-this._typicalHalfwidthCharacterWidth/2));t.ranges[0]=new HorizontalRange(i,this._typicalHalfwidthCharacterWidth)}}for(let e=0,i=t.ranges.length;e<i;e++){const i=t.ranges[e],o='<div class="cdr '+n+'" style="left:'+String(i.left)+"px;width:"+String(i.width)+"px;height:"+r+'px;"></div>';s[l]+=o}}}render(e,t){if(!this._renderResult)return"";const n=t-e;return n<0||n>=this._renderResult.length?"":this._renderResult[n]}}