import{runWhenIdle}from"../../../base/common/async.js";import{onUnexpectedError}from"../../../base/common/errors.js";import{Disposable,DisposableMap}from"../../../base/common/lifecycle.js";export class CodeEditorContributions extends Disposable{constructor(){super(),this._editor=null,this._instantiationService=null,this._instances=this._register(new DisposableMap),this._pending=new Map,this._finishedInstantiation=[],this._finishedInstantiation[0]=!1,this._finishedInstantiation[1]=!1,this._finishedInstantiation[2]=!1,this._finishedInstantiation[3]=!1}initialize(t,i,n){this._editor=t,this._instantiationService=n;for(const t of i)this._pending.has(t.id)?onUnexpectedError(new Error(`Cannot have two contributions with the same id ${t.id}`)):this._pending.set(t.id,t);this._instantiateSome(0),this._register(runWhenIdle((()=>{this._instantiateSome(1)}))),this._register(runWhenIdle((()=>{this._instantiateSome(2)}))),this._register(runWhenIdle((()=>{this._instantiateSome(3)}),5e3))}saveViewState(){const t={};for(const[i,n]of this._instances)"function"==typeof n.saveViewState&&(t[i]=n.saveViewState());return t}restoreViewState(t){for(const[i,n]of this._instances)"function"==typeof n.restoreViewState&&n.restoreViewState(t[i])}get(t){return this._instantiateById(t),this._instances.get(t)||null}onBeforeInteractionEvent(){this._instantiateSome(2)}onAfterModelAttached(){this._register(runWhenIdle((()=>{this._instantiateSome(1)}),50))}_instantiateSome(t){if(this._finishedInstantiation[t])return;this._finishedInstantiation[t]=!0;const i=this._findPendingContributionsByInstantiation(t);for(const t of i)this._instantiateById(t.id)}_findPendingContributionsByInstantiation(t){const i=[];for(const[,n]of this._pending)n.instantiation===t&&i.push(n);return i}_instantiateById(t){const i=this._pending.get(t);if(i){if(this._pending.delete(t),!this._instantiationService||!this._editor)throw new Error("Cannot instantiate contributions before being initialized!");try{const t=this._instantiationService.createInstance(i.ctor,this._editor);this._instances.set(i.id,t),"function"==typeof t.restoreViewState&&0!==i.instantiation&&console.warn(`Editor contribution '${i.id}' should be eager instantiated because it uses saveViewState / restoreViewState.`)}catch(t){onUnexpectedError(t)}}}}