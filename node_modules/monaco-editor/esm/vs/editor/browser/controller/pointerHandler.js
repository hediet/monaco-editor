import*as dom from"../../../base/browser/dom.js";import*as platform from"../../../base/common/platform.js";import{EventType,Gesture}from"../../../base/browser/touch.js";import{Disposable}from"../../../base/common/lifecycle.js";import{MouseHandler}from"./mouseHandler.js";import{EditorMouseEvent,EditorPointerEventFactory}from"../editorDom.js";import{BrowserFeatures}from"../../../base/browser/canIUse.js";import{TextAreaSyntethicEvents}from"./textAreaInput.js";export class PointerEventHandler extends MouseHandler{constructor(e,t,o){super(e,t,o),this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode)),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Tap,(e=>this.onTap(e)))),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Change,(e=>this.onChange(e)))),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Contextmenu,(e=>this._onContextMenu(new EditorMouseEvent(e,!1,this.viewHelper.viewDomNode),!1)))),this._lastPointerType="mouse",this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,"pointerdown",(e=>{const t=e.pointerType;this._lastPointerType="mouse"!==t?"touch"===t?"touch":"pen":"mouse"})));const i=new EditorPointerEventFactory(this.viewHelper.viewDomNode);this._register(i.onPointerMove(this.viewHelper.viewDomNode,(e=>this._onMouseMove(e)))),this._register(i.onPointerUp(this.viewHelper.viewDomNode,(e=>this._onMouseUp(e)))),this._register(i.onPointerLeave(this.viewHelper.viewDomNode,(e=>this._onMouseLeave(e)))),this._register(i.onPointerDown(this.viewHelper.viewDomNode,((e,t)=>this._onMouseDown(e,t))))}onTap(e){if(!e.initialTarget||!this.viewHelper.linesContentDomNode.contains(e.initialTarget))return;e.preventDefault(),this.viewHelper.focusTextArea();const t=this._createMouseTarget(new EditorMouseEvent(e,!1,this.viewHelper.viewDomNode),!1);t.position&&this.viewController.dispatchMouse({position:t.position,mouseColumn:t.position.column,startedOnLineNumbers:!1,revealType:1,mouseDownCount:e.tapCount,inSelectionMode:!1,altKey:!1,ctrlKey:!1,metaKey:!1,shiftKey:!1,leftButton:!1,middleButton:!1,onInjectedText:6===t.type&&null!==t.detail.injectedText})}onChange(e){"touch"===this._lastPointerType&&this._context.viewModel.viewLayout.deltaScrollNow(-e.translationX,-e.translationY)}_onMouseDown(e,t){"touch"!==e.browserEvent.pointerType&&super._onMouseDown(e,t)}}class TouchHandler extends MouseHandler{constructor(e,t,o){super(e,t,o),this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode)),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Tap,(e=>this.onTap(e)))),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Change,(e=>this.onChange(e)))),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Contextmenu,(e=>this._onContextMenu(new EditorMouseEvent(e,!1,this.viewHelper.viewDomNode),!1))))}onTap(e){e.preventDefault(),this.viewHelper.focusTextArea();const t=this._createMouseTarget(new EditorMouseEvent(e,!1,this.viewHelper.viewDomNode),!1);if(t.position){const e=document.createEvent("CustomEvent");e.initEvent(TextAreaSyntethicEvents.Tap,!1,!0),this.viewHelper.dispatchTextAreaEvent(e),this.viewController.moveTo(t.position,1)}}onChange(e){this._context.viewModel.viewLayout.deltaScrollNow(-e.translationX,-e.translationY)}}export class PointerHandler extends Disposable{constructor(e,t,o){super(),platform.isIOS&&BrowserFeatures.pointerEvents?this.handler=this._register(new PointerEventHandler(e,t,o)):window.TouchEvent?this.handler=this._register(new TouchHandler(e,t,o)):this.handler=this._register(new MouseHandler(e,t,o))}getTargetAtClientPoint(e,t){return this.handler.getTargetAtClientPoint(e,t)}}