import{distinct}from"../../../base/common/arrays.js";import{Emitter}from"../../../base/common/event.js";import*as types from"../../../base/common/types.js";import*as nls from"../../../nls.js";import{getLanguageTagSettingPlainKey}from"./configuration.js";import{Extensions as JSONExtensions}from"../../jsonschemas/common/jsonContributionRegistry.js";import{Registry}from"../../registry/common/platform.js";export const Extensions={Configuration:"base.contributions.configuration"};export const allSettings={properties:{},patternProperties:{}};export const applicationSettings={properties:{},patternProperties:{}};export const machineSettings={properties:{},patternProperties:{}};export const machineOverridableSettings={properties:{},patternProperties:{}};export const windowSettings={properties:{},patternProperties:{}};export const resourceSettings={properties:{},patternProperties:{}};export const resourceLanguageSettingsSchemaId="vscode://schemas/settings/resourceLanguage";const contributionRegistry=Registry.as(JSONExtensions.JSONContribution);class ConfigurationRegistry{constructor(){this.overrideIdentifiers=new Set,this._onDidSchemaChange=new Emitter,this._onDidUpdateConfiguration=new Emitter,this.configurationDefaultsOverrides=new Map,this.defaultLanguageConfigurationOverridesNode={id:"defaultOverrides",title:nls.localize("defaultLanguageConfigurationOverrides.title","Default Language Configuration Overrides"),properties:{}},this.configurationContributors=[this.defaultLanguageConfigurationOverridesNode],this.resourceLanguageSettingsSchema={properties:{},patternProperties:{},additionalProperties:!0,allowTrailingCommas:!0,allowComments:!0},this.configurationProperties={},this.policyConfigurations=new Map,this.excludedConfigurationProperties={},contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId,this.resourceLanguageSettingsSchema),this.registerOverridePropertyPatternKey()}registerConfiguration(e,t=!0){this.registerConfigurations([e],t)}registerConfigurations(e,t=!0){const i=new Set;this.doRegisterConfigurations(e,t,i),contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId,this.resourceLanguageSettingsSchema),this._onDidSchemaChange.fire(),this._onDidUpdateConfiguration.fire({properties:i})}registerDefaultConfigurations(e){const t=new Set;this.doRegisterDefaultConfigurations(e,t),this._onDidSchemaChange.fire(),this._onDidUpdateConfiguration.fire({properties:t,defaultsOverrides:!0})}doRegisterDefaultConfigurations(e,t){var i;const r=[];for(const{overrides:o,source:s}of e)for(const e in o)if(t.add(e),OVERRIDE_PROPERTY_REGEX.test(e)){const t=this.configurationDefaultsOverrides.get(e),n=null!==(i=null==t?void 0:t.valuesSources)&&void 0!==i?i:new Map;if(s)for(const t of Object.keys(o[e]))n.set(t,s);const a=Object.assign(Object.assign({},(null==t?void 0:t.value)||{}),o[e]);this.configurationDefaultsOverrides.set(e,{source:s,value:a,valuesSources:n});const g=getLanguageTagSettingPlainKey(e),u={type:"object",default:a,description:nls.localize("defaultLanguageConfiguration.description","Configure settings to be overridden for the {0} language.",g),$ref:resourceLanguageSettingsSchemaId,defaultDefaultValue:a,source:types.isString(s)?void 0:s,defaultValueSource:s};r.push(...overrideIdentifiersFromKey(e)),this.configurationProperties[e]=u,this.defaultLanguageConfigurationOverridesNode.properties[e]=u}else{this.configurationDefaultsOverrides.set(e,{value:o[e],source:s});const t=this.configurationProperties[e];t&&(this.updatePropertyDefaultValue(e,t),this.updateSchema(e,t))}this.doRegisterOverrideIdentifiers(r)}registerOverrideIdentifiers(e){this.doRegisterOverrideIdentifiers(e),this._onDidSchemaChange.fire()}doRegisterOverrideIdentifiers(e){for(const t of e)this.overrideIdentifiers.add(t);this.updateOverridePropertyPatternKey()}doRegisterConfigurations(e,t,i){e.forEach((e=>{this.validateAndRegisterProperties(e,t,e.extensionInfo,e.restrictedProperties,void 0,i),this.configurationContributors.push(e),this.registerJSONConfiguration(e)}))}validateAndRegisterProperties(e,t=!0,i,r,o=3,s){var n;o=types.isUndefinedOrNull(e.scope)?o:e.scope;const a=e.properties;if(a)for(const e in a){const g=a[e];t&&validateProperty(e,g)?delete a[e]:(g.source=i,g.defaultDefaultValue=a[e].default,this.updatePropertyDefaultValue(e,g),OVERRIDE_PROPERTY_REGEX.test(e)?g.scope=void 0:(g.scope=types.isUndefinedOrNull(g.scope)?o:g.scope,g.restricted=types.isUndefinedOrNull(g.restricted)?!!(null==r?void 0:r.includes(e)):g.restricted),!a[e].hasOwnProperty("included")||a[e].included?(this.configurationProperties[e]=a[e],(null===(n=a[e].policy)||void 0===n?void 0:n.name)&&this.policyConfigurations.set(a[e].policy.name,e),!a[e].deprecationMessage&&a[e].markdownDeprecationMessage&&(a[e].deprecationMessage=a[e].markdownDeprecationMessage),s.add(e)):(this.excludedConfigurationProperties[e]=a[e],delete a[e]))}const g=e.allOf;if(g)for(const e of g)this.validateAndRegisterProperties(e,t,i,r,o,s)}getConfigurationProperties(){return this.configurationProperties}getPolicyConfigurations(){return this.policyConfigurations}registerJSONConfiguration(e){const t=e=>{const i=e.properties;if(i)for(const e in i)this.updateSchema(e,i[e]);const r=e.allOf;null==r||r.forEach(t)};t(e)}updateSchema(e,t){switch(allSettings.properties[e]=t,t.scope){case 1:applicationSettings.properties[e]=t;break;case 2:machineSettings.properties[e]=t;break;case 6:machineOverridableSettings.properties[e]=t;break;case 3:windowSettings.properties[e]=t;break;case 4:resourceSettings.properties[e]=t;break;case 5:resourceSettings.properties[e]=t,this.resourceLanguageSettingsSchema.properties[e]=t}}updateOverridePropertyPatternKey(){for(const e of this.overrideIdentifiers.values()){const t=`[${e}]`,i={type:"object",description:nls.localize("overrideSettings.defaultDescription","Configure editor settings to be overridden for a language."),errorMessage:nls.localize("overrideSettings.errorMessage","This setting does not support per-language configuration."),$ref:resourceLanguageSettingsSchemaId};this.updatePropertyDefaultValue(t,i),allSettings.properties[t]=i,applicationSettings.properties[t]=i,machineSettings.properties[t]=i,machineOverridableSettings.properties[t]=i,windowSettings.properties[t]=i,resourceSettings.properties[t]=i}}registerOverridePropertyPatternKey(){const e={type:"object",description:nls.localize("overrideSettings.defaultDescription","Configure editor settings to be overridden for a language."),errorMessage:nls.localize("overrideSettings.errorMessage","This setting does not support per-language configuration."),$ref:resourceLanguageSettingsSchemaId};allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=e,this._onDidSchemaChange.fire()}updatePropertyDefaultValue(e,t){const i=this.configurationDefaultsOverrides.get(e);let r=null==i?void 0:i.value,o=null==i?void 0:i.source;types.isUndefined(r)&&(r=t.defaultDefaultValue,o=void 0),types.isUndefined(r)&&(r=getDefaultValue(t.type)),t.default=r,t.defaultValueSource=o}}const OVERRIDE_IDENTIFIER_PATTERN="\\[([^\\]]+)\\]",OVERRIDE_IDENTIFIER_REGEX=new RegExp("\\[([^\\]]+)\\]","g");export const OVERRIDE_PROPERTY_PATTERN="^(\\[([^\\]]+)\\])+$";export const OVERRIDE_PROPERTY_REGEX=new RegExp(OVERRIDE_PROPERTY_PATTERN);export function overrideIdentifiersFromKey(e){const t=[];if(OVERRIDE_PROPERTY_REGEX.test(e)){let i=OVERRIDE_IDENTIFIER_REGEX.exec(e);for(;null==i?void 0:i.length;){const r=i[1].trim();r&&t.push(r),i=OVERRIDE_IDENTIFIER_REGEX.exec(e)}}return distinct(t)}export function getDefaultValue(e){switch(Array.isArray(e)?e[0]:e){case"boolean":return!1;case"integer":case"number":return 0;case"string":return"";case"array":return[];case"object":return{};default:return null}}const configurationRegistry=new ConfigurationRegistry;Registry.add(Extensions.Configuration,configurationRegistry);export function validateProperty(e,t){var i,r,o,s;return e.trim()?OVERRIDE_PROPERTY_REGEX.test(e)?nls.localize("config.property.languageDefault","Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.",e):void 0!==configurationRegistry.getConfigurationProperties()[e]?nls.localize("config.property.duplicate","Cannot register '{0}'. This property is already registered.",e):(null===(i=t.policy)||void 0===i?void 0:i.name)&&void 0!==configurationRegistry.getPolicyConfigurations().get(null===(r=t.policy)||void 0===r?void 0:r.name)?nls.localize("config.policy.duplicate","Cannot register '{0}'. The associated policy {1} is already registered with {2}.",e,null===(o=t.policy)||void 0===o?void 0:o.name,configurationRegistry.getPolicyConfigurations().get(null===(s=t.policy)||void 0===s?void 0:s.name)):null:nls.localize("config.property.empty","Cannot register an empty property")}