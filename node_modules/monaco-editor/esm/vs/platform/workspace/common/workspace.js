import{localize}from"../../../nls.js";import{basename}from"../../../base/common/path.js";import{TernarySearchTree}from"../../../base/common/ternarySearchTree.js";import{URI}from"../../../base/common/uri.js";import{createDecorator}from"../../instantiation/common/instantiation.js";export const IWorkspaceContextService=createDecorator("contextService");export function isSingleFolderWorkspaceIdentifier(r){const t=r;return"string"==typeof(null==t?void 0:t.id)&&URI.isUri(t.uri)}export function isEmptyWorkspaceIdentifier(r){return"string"==typeof(null==r?void 0:r.id)&&!isSingleFolderWorkspaceIdentifier(r)&&!isWorkspaceIdentifier(r)}export const EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE={id:"ext-dev"};export const UNKNOWN_EMPTY_WINDOW_WORKSPACE={id:"empty-window"};export function toWorkspaceIdentifier(r,t){if("string"==typeof r||void 0===r)return"string"==typeof r?{id:basename(r)}:t?EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE:UNKNOWN_EMPTY_WINDOW_WORKSPACE;const e=r;return e.configuration?{id:e.id,configPath:e.configuration}:1===e.folders.length?{id:e.id,uri:e.folders[0].uri}:{id:e.id}}export function isWorkspaceIdentifier(r){const t=r;return"string"==typeof(null==t?void 0:t.id)&&URI.isUri(t.configPath)}export class Workspace{constructor(r,t,e,i,o){this._id=r,this._transient=e,this._configuration=i,this._ignorePathCasing=o,this._foldersMap=TernarySearchTree.forUris(this._ignorePathCasing,(()=>!0)),this.folders=t}get folders(){return this._folders}set folders(r){this._folders=r,this.updateFoldersMap()}get id(){return this._id}get transient(){return this._transient}get configuration(){return this._configuration}set configuration(r){this._configuration=r}getFolder(r){return r&&this._foldersMap.findSubstr(r)||null}updateFoldersMap(){this._foldersMap=TernarySearchTree.forUris(this._ignorePathCasing,(()=>!0));for(const r of this.folders)this._foldersMap.set(r.uri,r)}toJSON(){return{id:this.id,folders:this.folders,transient:this.transient,configuration:this.configuration}}}export class WorkspaceFolder{constructor(r,t){this.raw=t,this.uri=r.uri,this.index=r.index,this.name=r.name}toJSON(){return{uri:this.uri,name:this.name,index:this.index}}}export const WORKSPACE_EXTENSION="code-workspace";export const WORKSPACE_FILTER=[{name:localize("codeWorkspace","Code Workspace"),extensions:["code-workspace"]}];