import{IntervalTimer,TimeoutTimer}from"../../../base/common/async.js";import{Emitter,Event}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import*as nls from"../../../nls.js";import{IME}from"../../../base/common/ime.js";const HIGH_FREQ_COMMANDS=/^(cursor|delete|undo|redo|tab|editor\.action\.clipboard)/;export class AbstractKeybindingService extends Disposable{get onDidUpdateKeybindings(){return this._onDidUpdateKeybindings?this._onDidUpdateKeybindings.event:Event.None}constructor(e,i,t,r,n){super(),this._contextKeyService=e,this._commandService=i,this._telemetryService=t,this._notificationService=r,this._logService=n,this._onDidUpdateKeybindings=this._register(new Emitter),this._currentChord=null,this._currentChordChecker=new IntervalTimer,this._currentChordStatusMessage=null,this._ignoreSingleModifiers=KeybindingModifierSet.EMPTY,this._currentSingleModifier=null,this._currentSingleModifierClearTimeout=new TimeoutTimer,this._logging=!1}dispose(){super.dispose()}_log(e){this._logging&&this._logService.info(`[KeybindingService]: ${e}`)}getKeybindings(){return this._getResolver().getKeybindings()}lookupKeybinding(e,i){const t=this._getResolver().lookupPrimaryKeybinding(e,i||this._contextKeyService);if(t)return t.resolvedKeybinding}dispatchEvent(e,i){return this._dispatch(e,i)}softDispatch(e,i){this._log("/ Soft dispatching keyboard event");const t=this.resolveKeyboardEvent(e);if(t.hasMultipleChords())return console.warn("Unexpected keyboard event mapped to multiple chords"),null;const[r]=t.getDispatchChords();if(null===r)return this._log("\\ Keyboard event cannot be dispatched"),null;const n=this._contextKeyService.getContext(i),o=this._currentChord?this._currentChord.keypress:null;return this._getResolver().resolve(n,o,r)}_enterMultiChordMode(e,i){this._currentChord={keypress:e,label:i},this._currentChordStatusMessage=this._notificationService.status(nls.localize("first.chord","({0}) was pressed. Waiting for second key of chord...",i));const t=Date.now();this._currentChordChecker.cancelAndSet((()=>{this._documentHasFocus()?Date.now()-t>5e3&&this._leaveChordMode():this._leaveChordMode()}),500),IME.disable()}_leaveChordMode(){this._currentChordStatusMessage&&(this._currentChordStatusMessage.dispose(),this._currentChordStatusMessage=null),this._currentChordChecker.cancel(),this._currentChord=null,IME.enable()}_dispatch(e,i){return this._doDispatch(this.resolveKeyboardEvent(e),i,!1)}_singleModifierDispatch(e,i){const t=this.resolveKeyboardEvent(e),[r]=t.getSingleModifierDispatchChords();if(r)return this._ignoreSingleModifiers.has(r)?(this._log(`+ Ignoring single modifier ${r} due to it being pressed together with other keys.`),this._ignoreSingleModifiers=KeybindingModifierSet.EMPTY,this._currentSingleModifierClearTimeout.cancel(),this._currentSingleModifier=null,!1):(this._ignoreSingleModifiers=KeybindingModifierSet.EMPTY,null===this._currentSingleModifier?(this._log(`+ Storing single modifier for possible chord ${r}.`),this._currentSingleModifier=r,this._currentSingleModifierClearTimeout.cancelAndSet((()=>{this._log("+ Clearing single modifier due to 300ms elapsed."),this._currentSingleModifier=null}),300),!1):r===this._currentSingleModifier?(this._log(`/ Dispatching single modifier chord ${r} ${r}`),this._currentSingleModifierClearTimeout.cancel(),this._currentSingleModifier=null,this._doDispatch(t,i,!0)):(this._log(`+ Clearing single modifier due to modifier mismatch: ${this._currentSingleModifier} ${r}`),this._currentSingleModifierClearTimeout.cancel(),this._currentSingleModifier=null,!1));const[n]=t.getChords();return this._ignoreSingleModifiers=new KeybindingModifierSet(n),null!==this._currentSingleModifier&&this._log("+ Clearing single modifier due to other key up."),this._currentSingleModifierClearTimeout.cancel(),this._currentSingleModifier=null,!1}_doDispatch(e,i,t=!1){let r=!1;if(e.hasMultipleChords())return console.warn("Unexpected keyboard event mapped to multiple chords"),!1;let n=null,o=null;if(t){const[i]=e.getSingleModifierDispatchChords();n=i,o=i}else[n]=e.getDispatchChords(),o=this._currentChord?this._currentChord.keypress:null;if(null===n)return this._log("\\ Keyboard event cannot be dispatched in keydown phase."),r;const s=this._contextKeyService.getContext(i),d=e.getLabel(),l=this._getResolver().resolve(s,o,n);return this._logService.trace("KeybindingService#dispatch",d,null==l?void 0:l.commandId),l&&l.enterMultiChord?(r=!0,this._enterMultiChordMode(n,d),this._log("+ Entering chord mode..."),r):(this._currentChord&&(l&&l.commandId||(this._log(`+ Leaving chord mode: Nothing bound to "${this._currentChord.label} ${d}".`),this._notificationService.status(nls.localize("missing.chord","The key combination ({0}, {1}) is not a command.",this._currentChord.label,d),{hideAfter:1e4}),r=!0)),this._leaveChordMode(),l&&l.commandId&&(l.bubble||(r=!0),this._log(`+ Invoking command ${l.commandId}.`),void 0===l.commandArgs?this._commandService.executeCommand(l.commandId).then(void 0,(e=>this._notificationService.warn(e))):this._commandService.executeCommand(l.commandId,l.commandArgs).then(void 0,(e=>this._notificationService.warn(e))),HIGH_FREQ_COMMANDS.test(l.commandId)||this._telemetryService.publicLog2("workbenchActionExecuted",{id:l.commandId,from:"keybinding"})),r)}mightProducePrintableCharacter(e){return!e.ctrlKey&&!e.metaKey&&(e.keyCode>=31&&e.keyCode<=56||e.keyCode>=21&&e.keyCode<=30)}}class KeybindingModifierSet{constructor(e){this._ctrlKey=!!e&&e.ctrlKey,this._shiftKey=!!e&&e.shiftKey,this._altKey=!!e&&e.altKey,this._metaKey=!!e&&e.metaKey}has(e){switch(e){case"ctrl":return this._ctrlKey;case"shift":return this._shiftKey;case"alt":return this._altKey;case"meta":return this._metaKey}}}KeybindingModifierSet.EMPTY=new KeybindingModifierSet(null);