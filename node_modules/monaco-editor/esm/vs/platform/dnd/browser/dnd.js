import{DataTransfers}from"../../../base/browser/dnd.js";import{ResourceMap}from"../../../base/common/map.js";import{parse}from"../../../base/common/marshalling.js";import{URI}from"../../../base/common/uri.js";import{extractSelection}from"../../opener/common/opener.js";import{Registry}from"../../registry/common/platform.js";export const CodeDataTransfers={EDITORS:"CodeEditors",FILES:"CodeFiles"};export function extractEditorsDropData(r){var t;const o=[];if(r.dataTransfer&&r.dataTransfer.types.length>0){const e=r.dataTransfer.getData(CodeDataTransfers.EDITORS);if(e)try{o.push(...parse(e))}catch(r){}else try{const t=r.dataTransfer.getData(DataTransfers.RESOURCES);o.push(...createDraggedEditorInputFromRawResourcesData(t))}catch(r){}if(null===(t=r.dataTransfer)||void 0===t?void 0:t.files)for(let t=0;t<r.dataTransfer.files.length;t++){const e=r.dataTransfer.files[t];if(e&&e.path)try{o.push({resource:URI.file(e.path),isExternal:!0,allowWorkspaceOpen:!0})}catch(r){}}const s=r.dataTransfer.getData(CodeDataTransfers.FILES);if(s)try{const r=JSON.parse(s);for(const t of r)o.push({resource:URI.file(t),isExternal:!0,allowWorkspaceOpen:!0})}catch(r){}const a=Registry.as(Extensions.DragAndDropContribution).getAll();for(const t of a){const e=r.dataTransfer.getData(t.dataFormatKey);if(e)try{o.push(...t.getEditorInputs(e))}catch(r){}}}const e=[],s=new ResourceMap;for(const r of o)r.resource?s.has(r.resource)||(e.push(r),s.set(r.resource,!0)):e.push(r);return e}export function createDraggedEditorInputFromRawResourcesData(r){const t=[];if(r){const o=JSON.parse(r);for(const r of o)if(r.indexOf(":")>0){const{selection:o,uri:e}=extractSelection(URI.parse(r));t.push({resource:e,options:{selection:o}})}}return t}class DragAndDropContributionRegistry{constructor(){this._contributions=new Map}getAll(){return this._contributions.values()}}export const Extensions={DragAndDropContribution:"workbench.contributions.dragAndDrop"};Registry.add(Extensions.DragAndDropContribution,new DragAndDropContributionRegistry);