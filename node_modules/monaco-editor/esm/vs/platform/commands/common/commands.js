import{Emitter}from"../../../base/common/event.js";import{Iterable}from"../../../base/common/iterator.js";import{toDisposable}from"../../../base/common/lifecycle.js";import{LinkedList}from"../../../base/common/linkedList.js";import{validateConstraints}from"../../../base/common/types.js";import{createDecorator}from"../../instantiation/common/instantiation.js";export const ICommandService=createDecorator("commandService");export const CommandsRegistry=new class{constructor(){this._commands=new Map,this._onDidRegisterCommand=new Emitter,this.onDidRegisterCommand=this._onDidRegisterCommand.event}registerCommand(t,o){if(!t)throw new Error("invalid command");if("string"==typeof t){if(!o)throw new Error("invalid command");return this.registerCommand({id:t,handler:o})}if(t.description){const o=[];for(const e of t.description.args)o.push(e.constraint);const e=t.handler;t.handler=function(t,...n){return validateConstraints(n,o),e(t,...n)}}const{id:e}=t;let n=this._commands.get(e);n||(n=new LinkedList,this._commands.set(e,n));const s=n.unshift(t),i=toDisposable((()=>{s();const t=this._commands.get(e);(null==t?void 0:t.isEmpty())&&this._commands.delete(e)}));return this._onDidRegisterCommand.fire(e),i}registerCommandAlias(t,o){return CommandsRegistry.registerCommand(t,((t,...e)=>t.get(ICommandService).executeCommand(o,...e)))}getCommand(t){const o=this._commands.get(t);if(o&&!o.isEmpty())return Iterable.first(o)}getCommands(){const t=new Map;for(const o of this._commands.keys()){const e=this.getCommand(o);e&&t.set(o,e)}return t}};CommandsRegistry.registerCommand("noop",(()=>{}));