import{Emitter}from"../../../base/common/event.js";import{Disposable,toDisposable}from"../../../base/common/lifecycle.js";import{createDecorator}from"../../instantiation/common/instantiation.js";import*as platform from"../../registry/common/platform.js";import{ColorScheme}from"./theme.js";export const IThemeService=createDecorator("themeService");export function themeColorFromId(e){return{id:e}}export function getThemeTypeSelector(e){switch(e){case ColorScheme.DARK:return"vs-dark";case ColorScheme.HIGH_CONTRAST_DARK:return"hc-black";case ColorScheme.HIGH_CONTRAST_LIGHT:return"hc-light";default:return"vs"}}export const Extensions={ThemingContribution:"base.contributions.theming"};class ThemingRegistry{constructor(){this.themingParticipants=[],this.themingParticipants=[],this.onThemingParticipantAddedEmitter=new Emitter}onColorThemeChange(e){return this.themingParticipants.push(e),this.onThemingParticipantAddedEmitter.fire(e),toDisposable((()=>{const t=this.themingParticipants.indexOf(e);this.themingParticipants.splice(t,1)}))}getThemingParticipants(){return this.themingParticipants}}const themingRegistry=new ThemingRegistry;platform.Registry.add(Extensions.ThemingContribution,themingRegistry);export function registerThemingParticipant(e){return themingRegistry.onColorThemeChange(e)}export class Themable extends Disposable{constructor(e){super(),this.themeService=e,this.theme=e.getColorTheme(),this._register(this.themeService.onDidColorThemeChange((e=>this.onThemeChange(e))))}onThemeChange(e){this.theme=e,this.updateStyles()}updateStyles(){}}