import{createKeybinding}from"../../../base/common/keybindings.js";import{OS}from"../../../base/common/platform.js";import{CommandsRegistry}from"../../commands/common/commands.js";import{Registry}from"../../registry/common/platform.js";import{combinedDisposable,DisposableStore,toDisposable}from"../../../base/common/lifecycle.js";import{LinkedList}from"../../../base/common/linkedList.js";class KeybindingsRegistryImpl{constructor(){this._coreKeybindings=new LinkedList,this._extensionKeybindings=[],this._cachedMergedKeybindings=null}static bindToCurrentPlatform(e){if(1===OS){if(e&&e.win)return e.win}else if(2===OS){if(e&&e.mac)return e.mac}else if(e&&e.linux)return e.linux;return e}registerKeybindingRule(e){const i=KeybindingsRegistryImpl.bindToCurrentPlatform(e),n=new DisposableStore;if(i&&i.primary){const r=createKeybinding(i.primary,OS);r&&n.add(this._registerDefaultKeybinding(r,e.id,e.args,e.weight,0,e.when))}if(i&&Array.isArray(i.secondary))for(let r=0,t=i.secondary.length;r<t;r++){const t=i.secondary[r],s=createKeybinding(t,OS);s&&n.add(this._registerDefaultKeybinding(s,e.id,e.args,e.weight,-r-1,e.when))}return n}registerCommandAndKeybindingRule(e){return combinedDisposable(this.registerKeybindingRule(e),CommandsRegistry.registerCommand(e))}static _mightProduceChar(e){return e>=21&&e<=30||e>=31&&e<=56||80===e||81===e||82===e||83===e||84===e||85===e||86===e||110===e||111===e||87===e||88===e||89===e||90===e||91===e||92===e}_assertNoCtrlAlt(e,i){e.ctrlKey&&e.altKey&&!e.metaKey&&KeybindingsRegistryImpl._mightProduceChar(e.keyCode)&&console.warn("Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ",e," for ",i)}_registerDefaultKeybinding(e,i,n,r,t,s){1===OS&&this._assertNoCtrlAlt(e.parts[0],i);const o=this._coreKeybindings.push({keybinding:e.parts,command:i,commandArgs:n,when:s,weight1:r,weight2:t,extensionId:null,isBuiltinExtension:!1});return this._cachedMergedKeybindings=null,toDisposable((()=>{o(),this._cachedMergedKeybindings=null}))}getDefaultKeybindings(){return this._cachedMergedKeybindings||(this._cachedMergedKeybindings=Array.from(this._coreKeybindings).concat(this._extensionKeybindings),this._cachedMergedKeybindings.sort(sorter)),this._cachedMergedKeybindings.slice(0)}}export const KeybindingsRegistry=new KeybindingsRegistryImpl;export const Extensions={EditorModes:"platform.keybindingsRegistry"};function sorter(e,i){if(e.weight1!==i.weight1)return e.weight1-i.weight1;if(e.command&&i.command){if(e.command<i.command)return-1;if(e.command>i.command)return 1}return e.weight2-i.weight2}Registry.add(Extensions.EditorModes,KeybindingsRegistry);