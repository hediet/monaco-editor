var __decorate=this&&this.__decorate||function(e,t,i,o){var n,s=arguments.length,a=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,i,o);else for(var r=e.length-1;r>=0;r--)(n=e[r])&&(a=(s<3?n(a):s>3?n(t,i,a):n(t,i))||a);return s>3&&a&&Object.defineProperty(t,i,a),a},__param=this&&this.__param||function(e,t){return function(i,o){t(i,o,e)}};import{FindInput}from"../../../base/browser/ui/findinput/findInput.js";import{ReplaceInput}from"../../../base/browser/ui/findinput/replaceInput.js";import{ContextKeyExpr,IContextKeyService,RawContextKey}from"../../contextkey/common/contextkey.js";import{KeybindingsRegistry}from"../../keybinding/common/keybindingsRegistry.js";import{localize}from"../../../nls.js";import{DisposableStore,toDisposable}from"../../../base/common/lifecycle.js";export const historyNavigationVisible=new RawContextKey("suggestWidgetVisible",!1,localize("suggestWidgetVisible","Whether suggestion are visible"));const HistoryNavigationWidgetFocusContext="historyNavigationWidgetFocus",HistoryNavigationForwardsEnablementContext="historyNavigationForwardsEnabled",HistoryNavigationBackwardsEnablementContext="historyNavigationBackwardsEnabled";let lastFocusedWidget;const widgets=[];export function registerAndCreateHistoryNavigationContext(e,t){if(widgets.includes(t))throw new Error("Cannot register the same widget multiple times");widgets.push(t);const i=new DisposableStore,o=i.add(e.createScoped(t.element)),n=new RawContextKey("historyNavigationWidgetFocus",!1).bindTo(o),s=new RawContextKey("historyNavigationForwardsEnabled",!0).bindTo(o),a=new RawContextKey("historyNavigationBackwardsEnabled",!0).bindTo(o),r=()=>{n.set(!0),lastFocusedWidget=t},d=()=>{n.set(!1),lastFocusedWidget===t&&(lastFocusedWidget=void 0)};return t.element===document.activeElement&&r(),i.add(t.onDidFocus((()=>r()))),i.add(t.onDidBlur((()=>d()))),i.add(toDisposable((()=>{widgets.splice(widgets.indexOf(t),1),d()}))),{scopedContextKeyService:o,historyNavigationForwardsEnablement:s,historyNavigationBackwardsEnablement:a,dispose(){i.dispose()}}}let ContextScopedFindInput=class extends FindInput{constructor(e,t,i,o){super(e,t,i),this._register(registerAndCreateHistoryNavigationContext(o,this.inputBox))}};ContextScopedFindInput=__decorate([__param(3,IContextKeyService)],ContextScopedFindInput);export{ContextScopedFindInput};let ContextScopedReplaceInput=class extends ReplaceInput{constructor(e,t,i,o,n=!1){super(e,t,n,i),this._register(registerAndCreateHistoryNavigationContext(o,this.inputBox))}};ContextScopedReplaceInput=__decorate([__param(3,IContextKeyService)],ContextScopedReplaceInput);export{ContextScopedReplaceInput};KeybindingsRegistry.registerCommandAndKeybindingRule({id:"history.showPrevious",weight:200,when:ContextKeyExpr.and(ContextKeyExpr.has("historyNavigationWidgetFocus"),ContextKeyExpr.equals("historyNavigationBackwardsEnabled",!0),historyNavigationVisible.isEqualTo(!1)),primary:16,secondary:[528],handler:e=>{null==lastFocusedWidget||lastFocusedWidget.showPreviousValue()}}),KeybindingsRegistry.registerCommandAndKeybindingRule({id:"history.showNext",weight:200,when:ContextKeyExpr.and(ContextKeyExpr.has("historyNavigationWidgetFocus"),ContextKeyExpr.equals("historyNavigationForwardsEnabled",!0),historyNavigationVisible.isEqualTo(!1)),primary:18,secondary:[530],handler:e=>{null==lastFocusedWidget||lastFocusedWidget.showNextValue()}});