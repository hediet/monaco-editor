import{RunOnceScheduler}from"../../../base/common/async.js";import{Codicon,CSSIcon}from"../../../base/common/codicons.js";import{Emitter}from"../../../base/common/event.js";import{isString}from"../../../base/common/types.js";import{URI}from"../../../base/common/uri.js";import{localize}from"../../../nls.js";import{Extensions as JSONExtensions}from"../../jsonschemas/common/jsonContributionRegistry.js";import*as platform from"../../registry/common/platform.js";import{ThemeIcon}from"./themeService.js";export const Extensions={IconContribution:"base.contributions.icons"};export var IconContribution;!function(o){o.getDefinition=function(o,i){let e=o.defaults;for(;ThemeIcon.isThemeIcon(e);){const o=iconRegistry.getIcon(e.id);if(!o)return;e=o.defaults}return e}}(IconContribution||(IconContribution={}));export var IconFontDefinition;!function(o){o.toJSONObject=function(o){return{weight:o.weight,style:o.style,src:o.src.map((o=>({format:o.format,location:o.location.toString()})))}},o.fromJSONObject=function(o){const i=o=>isString(o)?o:void 0;if(o&&Array.isArray(o.src)&&o.src.every((o=>isString(o.format)&&isString(o.location))))return{weight:i(o.weight),style:i(o.style),src:o.src.map((o=>({format:o.format,location:URI.parse(o.location)})))}}}(IconFontDefinition||(IconFontDefinition={}));class IconRegistry{constructor(){this._onDidChange=new Emitter,this.onDidChange=this._onDidChange.event,this.iconSchema={definitions:{icons:{type:"object",properties:{fontId:{type:"string",description:localize("iconDefinition.fontId","The id of the font to use. If not set, the font that is defined first is used.")},fontCharacter:{type:"string",description:localize("iconDefinition.fontCharacter","The font character associated with the icon definition.")}},additionalProperties:!1,defaultSnippets:[{body:{fontCharacter:"\\\\e030"}}]}},type:"object",properties:{}},this.iconReferenceSchema={type:"string",pattern:`^${CSSIcon.iconNameExpression}$`,enum:[],enumDescriptions:[]},this.iconsById={},this.iconFontsById={}}registerIcon(o,i,e,n){const t=this.iconsById[o];if(t){if(e&&!t.description){t.description=e,this.iconSchema.properties[o].markdownDescription=`${e} $(${o})`;const i=this.iconReferenceSchema.enum.indexOf(o);-1!==i&&(this.iconReferenceSchema.enumDescriptions[i]=e),this._onDidChange.fire()}return t}const s={id:o,description:e,defaults:i,deprecationMessage:n};this.iconsById[o]=s;const c={$ref:"#/definitions/icons"};return n&&(c.deprecationMessage=n),e&&(c.markdownDescription=`${e}: $(${o})`),this.iconSchema.properties[o]=c,this.iconReferenceSchema.enum.push(o),this.iconReferenceSchema.enumDescriptions.push(e||""),this._onDidChange.fire(),{id:o}}getIcons(){return Object.keys(this.iconsById).map((o=>this.iconsById[o]))}getIcon(o){return this.iconsById[o]}getIconSchema(){return this.iconSchema}toString(){const o=(o,i)=>o.id.localeCompare(i.id),i=o=>{for(;ThemeIcon.isThemeIcon(o.defaults);)o=this.iconsById[o.defaults.id];return`codicon codicon-${o?o.id:""}`},e=[];e.push("| preview     | identifier                        | default codicon ID                | description"),e.push("| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |");const n=Object.keys(this.iconsById).map((o=>this.iconsById[o]));for(const t of n.filter((o=>!!o.description)).sort(o))e.push(`|<i class="${i(t)}"></i>|${t.id}|${ThemeIcon.isThemeIcon(t.defaults)?t.defaults.id:t.id}|${t.description||""}|`);e.push("| preview     | identifier                        "),e.push("| ----------- | --------------------------------- |");for(const t of n.filter((o=>!ThemeIcon.isThemeIcon(o.defaults))).sort(o))e.push(`|<i class="${i(t)}"></i>|${t.id}|`);return e.join("\n")}}const iconRegistry=new IconRegistry;platform.Registry.add(Extensions.IconContribution,iconRegistry);export function registerIcon(o,i,e,n){return iconRegistry.registerIcon(o,i,e,n)}export function getIconRegistry(){return iconRegistry}function initialize(){for(const o of Codicon.getAll())iconRegistry.registerIcon(o.id,o.definition,o.description)}initialize();export const iconsSchemaId="vscode://schemas/icons";const schemaRegistry=platform.Registry.as(JSONExtensions.JSONContribution);schemaRegistry.registerSchema(iconsSchemaId,iconRegistry.getIconSchema());const delayer=new RunOnceScheduler((()=>schemaRegistry.notifySchemaChanged(iconsSchemaId)),200);iconRegistry.onDidChange((()=>{delayer.isScheduled()||delayer.schedule()}));export const widgetClose=registerIcon("widget-close",Codicon.close,localize("widgetClose","Icon for the close action in widgets."));export const gotoPreviousLocation=registerIcon("goto-previous-location",Codicon.arrowUp,localize("previousChangeIcon","Icon for goto previous editor location."));export const gotoNextLocation=registerIcon("goto-next-location",Codicon.arrowDown,localize("nextChangeIcon","Icon for goto next editor location."));export const syncing=ThemeIcon.modify(Codicon.sync,"spin");export const spinningLoading=ThemeIcon.modify(Codicon.loading,"spin");