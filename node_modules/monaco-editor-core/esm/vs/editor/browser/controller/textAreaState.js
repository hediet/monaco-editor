import*as strings from"../../../base/common/strings.js";import{Position}from"../../common/core/position.js";import{Range}from"../../common/core/range.js";export const _debugComposition=!1;export class TextAreaState{constructor(e,t,n,i,r){this.value=e,this.selectionStart=t,this.selectionEnd=n,this.selectionStartPosition=i,this.selectionEndPosition=r}toString(){return`[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`}static readFromTextArea(e){return new TextAreaState(e.getValue(),e.getSelectionStart(),e.getSelectionEnd(),null,null)}collapseSelection(){return new TextAreaState(this.value,this.value.length,this.value.length,null,null)}writeToTextArea(e,t,n){t.setValue(e,this.value),n&&t.setSelectionRange(e,this.selectionStart,this.selectionEnd)}deduceEditorPosition(e){if(e<=this.selectionStart){const t=this.value.substring(e,this.selectionStart);return this._finishDeduceEditorPosition(this.selectionStartPosition,t,-1)}if(e>=this.selectionEnd){const t=this.value.substring(this.selectionEnd,e);return this._finishDeduceEditorPosition(this.selectionEndPosition,t,1)}const t=this.value.substring(this.selectionStart,e);if(-1===t.indexOf(String.fromCharCode(8230)))return this._finishDeduceEditorPosition(this.selectionStartPosition,t,1);const n=this.value.substring(e,this.selectionEnd);return this._finishDeduceEditorPosition(this.selectionEndPosition,n,-1)}_finishDeduceEditorPosition(e,t,n){let i=0,r=-1;for(;-1!==(r=t.indexOf("\n",r+1));)i++;return[e,n*t.length,i]}static deduceInput(e,t,n){if(!e)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:0};const i=Math.min(strings.commonPrefixLength(e.value,t.value),e.selectionStart,t.selectionStart),r=Math.min(strings.commonSuffixLength(e.value,t.value),e.value.length-e.selectionEnd,t.value.length-t.selectionEnd),s=(e.value.substring(i,e.value.length-r),t.value.substring(i,t.value.length-r)),a=e.selectionStart-i,o=e.selectionEnd-i;if(t.selectionStart-i===t.selectionEnd-i){return{text:s,replacePrevCharCnt:e.selectionStart-i,replaceNextCharCnt:0,positionDelta:0}}return{text:s,replacePrevCharCnt:o-a,replaceNextCharCnt:0,positionDelta:0}}static deduceAndroidCompositionInput(e,t){if(!e)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:0};if(e.value===t.value)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:t.selectionEnd-e.selectionEnd};const n=Math.min(strings.commonPrefixLength(e.value,t.value),e.selectionEnd),i=Math.min(strings.commonSuffixLength(e.value,t.value),e.value.length-e.selectionEnd),r=e.value.substring(n,e.value.length-i),s=t.value.substring(n,t.value.length-i),a=(e.selectionStart,e.selectionEnd-n),o=(t.selectionStart,t.selectionEnd-n);return{text:s,replacePrevCharCnt:a,replaceNextCharCnt:r.length-a,positionDelta:o-s.length}}}TextAreaState.EMPTY=new TextAreaState("",0,0,null,null);export class PagedScreenReaderStrategy{static _getPageOfLine(e,t){return Math.floor((e-1)/t)}static _getRangeForPage(e,t){const n=e*t;return new Range(n+1,1,n+t+1,1)}static fromEditorSelection(e,t,n,i,r){const s=PagedScreenReaderStrategy._getPageOfLine(n.startLineNumber,i),a=PagedScreenReaderStrategy._getRangeForPage(s,i),o=PagedScreenReaderStrategy._getPageOfLine(n.endLineNumber,i),l=PagedScreenReaderStrategy._getRangeForPage(o,i),c=a.intersectRanges(new Range(1,1,n.startLineNumber,n.startColumn));let g=t.getValueInRange(c,1);const u=t.getLineCount(),h=t.getLineMaxColumn(u),d=l.intersectRanges(new Range(n.endLineNumber,n.endColumn,u,h));let S,m=t.getValueInRange(d,1);if(s===o||s+1===o)S=t.getValueInRange(n,1);else{const e=a.intersectRanges(n),i=l.intersectRanges(n);S=t.getValueInRange(e,1)+String.fromCharCode(8230)+t.getValueInRange(i,1)}if(r){const e=500;g.length>e&&(g=g.substring(g.length-e,g.length)),m.length>e&&(m=m.substring(0,e)),S.length>2*e&&(S=S.substring(0,e)+String.fromCharCode(8230)+S.substring(S.length-e,S.length))}return new TextAreaState(g+S+m,g.length,g.length+S.length,new Position(n.startLineNumber,n.startColumn),new Position(n.endLineNumber,n.endColumn))}}