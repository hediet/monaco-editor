import{SequenceDiff,OffsetRange}from"./diffAlgorithm.js";export class MyersDiffAlgorithm{compute(t,e){function r(r,s){for(;r<t.length&&s<e.length&&t.getElement(r)===e.getElement(s);)r++,s++;return r}let s=0;const n=new FastInt32Array;n.set(0,r(0,0));const i=new FastArrayNegativeIndices;i.set(0,0===n.get(0)?null:new SnakePath(null,0,0,n.get(0)));let h=0;t:for(;;)for(s++,h=-s;h<=s;h+=2){const g=h===s?-1:n.get(h+1),a=h===-s?-1:n.get(h-1)+1,o=Math.min(Math.max(g,a),t.length),l=o-h,A=r(o,l);n.set(h,A);const f=o===g?i.get(h+1):i.get(h-1);if(i.set(h,A!==o?new SnakePath(f,o,l,A-o):f),n.get(h)===t.length&&n.get(h)-h===e.length)break t}let g=i.get(h);const a=[];let o=t.length,l=e.length;for(;;){const t=g?g.x+g.length:0,e=g?g.y+g.length:0;if(t===o&&e===l||a.push(new SequenceDiff(new OffsetRange(t,o),new OffsetRange(e,l))),!g)break;o=g.x,l=g.y,g=g.prev}return a.reverse(),a}}class SnakePath{constructor(t,e,r,s){this.prev=t,this.x=e,this.y=r,this.length=s}}class FastInt32Array{constructor(){this.positiveArr=new Int32Array(10),this.negativeArr=new Int32Array(10)}get(t){return t<0?(t=-t-1,this.negativeArr[t]):this.positiveArr[t]}set(t,e){if(t<0){if((t=-t-1)>=this.negativeArr.length){const t=this.negativeArr;this.negativeArr=new Int32Array(2*t.length),this.negativeArr.set(t)}this.negativeArr[t]=e}else{if(t>=this.positiveArr.length){const t=this.positiveArr;this.positiveArr=new Int32Array(2*t.length),this.positiveArr.set(t)}this.positiveArr[t]=e}}}class FastArrayNegativeIndices{constructor(){this.positiveArr=[],this.negativeArr=[]}get(t){return t<0?(t=-t-1,this.negativeArr[t]):this.positiveArr[t]}set(t,e){t<0?(t=-t-1,this.negativeArr[t]=e):this.positiveArr[t]=e}}