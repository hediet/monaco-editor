import{computeIndentLevel}from"../../../common/model/utils.js";import{FoldingRegions,MAX_LINE_NUMBER}from"./foldingRanges.js";const MAX_FOLDING_REGIONS_FOR_INDENT_DEFAULT=5e3;export const ID_INDENT_PROVIDER="indent";export class IndentRangeProvider{constructor(e,t,n){this.editorModel=e,this.languageConfigurationService=t,this.foldingRangesLimit=n,this.id="indent"}dispose(){}compute(e){const t=this.languageConfigurationService.getLanguageConfiguration(this.editorModel.getLanguageId()).foldingRules,n=t&&!!t.offSide,i=t&&t.markers;return Promise.resolve(computeRanges(this.editorModel,n,i,this.foldingRangesLimit))}}export class RangesCollector{constructor(e){this._startIndexes=[],this._endIndexes=[],this._indentOccurrences=[],this._length=0,this._foldingRangesLimit=e}insertFirst(e,t,n){if(e>MAX_LINE_NUMBER||t>MAX_LINE_NUMBER)return;const i=this._length;this._startIndexes[i]=e,this._endIndexes[i]=t,this._length++,n<1e3&&(this._indentOccurrences[n]=(this._indentOccurrences[n]||0)+1)}toIndentRanges(e){const t=this._foldingRangesLimit.limit;if(this._length<=t){this._foldingRangesLimit.report({limited:!1,computed:this._length});const e=new Uint32Array(this._length),t=new Uint32Array(this._length);for(let n=this._length-1,i=0;n>=0;n--,i++)e[i]=this._startIndexes[n],t[i]=this._endIndexes[n];return new FoldingRegions(e,t)}{this._foldingRangesLimit.report({limited:t,computed:this._length});let n=0,i=this._indentOccurrences.length;for(let e=0;e<this._indentOccurrences.length;e++){const s=this._indentOccurrences[e];if(s){if(s+n>t){i=e;break}n+=s}}const s=e.getOptions().tabSize,o=new Uint32Array(t),r=new Uint32Array(t);for(let d=this._length-1,g=0;d>=0;d--){const l=this._startIndexes[d],c=e.getLineContent(l),h=computeIndentLevel(c,s);(h<i||h===i&&n++<t)&&(o[g]=l,r[g]=this._endIndexes[d],g++)}return new FoldingRegions(o,r)}}}const foldingRangesLimitDefault={limit:5e3,report:()=>{}};export function computeRanges(e,t,n,i=foldingRangesLimitDefault){const s=e.getOptions().tabSize,o=new RangesCollector(i);let r;n&&(r=new RegExp(`(${n.start.source})|(?:${n.end.source})`));const d=[],g=e.getLineCount()+1;d.push({indent:-1,endAbove:g,line:g});for(let n=e.getLineCount();n>0;n--){const i=e.getLineContent(n),g=computeIndentLevel(i,s);let l,c=d[d.length-1];if(-1!==g){if(r&&(l=i.match(r))){if(!l[1]){d.push({indent:-2,endAbove:n,line:n});continue}{let e=d.length-1;for(;e>0&&-2!==d[e].indent;)e--;if(e>0){d.length=e+1,c=d[e],o.insertFirst(n,c.line,g),c.line=n,c.indent=g,c.endAbove=n;continue}}}if(c.indent>g){do{d.pop(),c=d[d.length-1]}while(c.indent>g);const e=c.endAbove-1;e-n>=1&&o.insertFirst(n,e,g)}c.indent===g?c.endAbove=n:d.push({indent:g,endAbove:n,line:n})}else t&&(c.endAbove=n)}return o.toIndentRanges(e)}