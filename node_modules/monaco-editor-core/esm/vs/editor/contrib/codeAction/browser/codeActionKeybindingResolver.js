import{Lazy}from"../../../../base/common/lazy.js";import{codeActionCommandId,fixAllCommandId,organizeImportsCommandId,refactorCommandId,sourceActionCommandId}from"./codeAction.js";import{CodeActionCommandArgs,CodeActionKind}from"../common/types.js";export class CodeActionKeybindingResolver{constructor(n){this.keybindingService=n}getResolver(){const n=new Lazy((()=>this.keybindingService.getKeybindings().filter((n=>CodeActionKeybindingResolver.codeActionCommands.indexOf(n.command)>=0)).filter((n=>n.resolvedKeybinding)).map((n=>{let o=n.commandArgs;return n.command===organizeImportsCommandId?o={kind:CodeActionKind.SourceOrganizeImports.value}:n.command===fixAllCommandId&&(o={kind:CodeActionKind.SourceFixAll.value}),Object.assign({resolvedKeybinding:n.resolvedKeybinding},CodeActionCommandArgs.fromUser(o,{kind:CodeActionKind.None,apply:"never"}))}))));return o=>{if(o.kind){const e=this.bestKeybindingForCodeAction(o,n.getValue());return null==e?void 0:e.resolvedKeybinding}}}bestKeybindingForCodeAction(n,o){if(!n.kind)return;const e=new CodeActionKind(n.kind);return o.filter((n=>n.kind.contains(e))).filter((o=>!o.preferred||n.isPreferred)).reduceRight(((n,o)=>n?n.kind.contains(o.kind)?o:n:o),void 0)}}CodeActionKeybindingResolver.codeActionCommands=[refactorCommandId,codeActionCommandId,sourceActionCommandId,organizeImportsCommandId,fixAllCommandId];