{"version":3,"file":"playgroundRunner.js","mappings":"oIAkBA,IAAIA,EA+DJ,SAAgBC,EAAeC,GAK9B,MAAO,CACNC,UAAW,GAAGD,cACdE,kBANyB,CACzBC,GAAI,GAAGH,KAMPI,WAAY,GAAGJ,iDACfK,oBAAgBC,EAElB,C,sIA5FA,6BACC,IAAKC,OACJ,MAAM,IAAIC,MAAM,4BAEjB,OAAOD,MACR,EAEA,uBACC,OAAQE,OAAeF,MACxB,EAUA,aAAOG,eACNC,EAAsB,EAAAC,iBAKtB,OAHKd,IACJA,EAKFY,eAA2BC,GAC1B,MAAME,EAASC,KAqChB,IAAoBC,EAnCbF,EAAeG,eAmCFD,EAlCDJ,EAAMV,UAmCjB,IAAIgB,SAASC,IACnB,MAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,OAAS,IAAMJ,IACtBC,EAAOT,OAAQ,EACfS,EAAOI,KAAO,kBACdJ,EAAOK,IAAMT,EACbK,SAASK,KAAKC,YAAYP,EAAO,KAtClCN,EAAOc,KAAM,EACbd,EAAOe,eAAiB,IAChBjB,EAAMP,WAGdyB,QAAQC,IAAI,mBACZD,QAAQC,IAAIC,KAAKC,UAAUrB,EAAMT,kBAAmB,KAAM,OAG1D,MAAM+B,EAAMpB,EAAOG,QAGnB,OAFAiB,EAAIC,OAAO,CAAEC,MAAOxB,EAAMT,oBAEnB,IAAIe,SAASC,IAEnBe,EAAI,CAAC,0BAA0B,KAC9BA,EACC,CACC,yCACA,sCACA,uCACA,uCACA,+CAED,KACCf,EAAIX,OAAO,GAEZ,GACA,GAEJ,CAzCsB6B,CAAYzB,IAE1Bb,CACR,EAmDa,EAAAc,gBAAkBb,EAC9B,qCAGD,kB,kICjFA,gDAWA,IAAIsC,cAEJ3B,eAAe4B,WAAWC,OACzB,GAAIF,cACH,MAAM,IAAI7B,MAAM,uBAGjB,MAAMgC,oBAAsBpB,SAASC,cAAc,OACnDmB,oBAAoBC,UAAY,mBAChC,MAAMC,WAAatB,SAASC,cAAc,OAC1CqB,WAAWD,UAAY,SACvBD,oBAAoBd,YAAYgB,YAChCtB,SAASuB,KAAKjB,YAAYc,qBAE1BH,eAAgB,kBAAAO,YAAWL,MAAMM,mBAC3BR,cAENG,oBAAoBM,SAEpB,MAAMC,MAAQ3B,SAASC,cAAc,SACrC0B,MAAMC,UAAYT,MAAMU,IACxB7B,SAASuB,KAAKjB,YAAYqB,OAE1B3B,SAASuB,KAAKK,WAAaT,MAAMW,KAEjC,IACCC,KAAKZ,MAAMa,G,CACV,MAAOC,GACR,MAAMC,EAAMlC,SAASC,cAAc,OACnCiC,EAAI5B,YAAYN,SAASmC,eAAe,GAAGF,MAC3CjC,SAASuB,KAAKa,aAAaF,EAAKlC,SAASuB,KAAKc,W,CAEhD,CAzCA,yBAEAhD,OAAOiD,iBAAiB,WAAYC,IACnC,MAAMC,EAAID,EAAME,KACD,eAAXD,EAAEE,MACLxB,WAAWsB,EAAErB,M","sources":["file:////home/runner/work/monaco-editor/monaco-editor/website-v2/src/monaco-loader.ts","file:////home/runner/work/monaco-editor/monaco-editor/website-v2/src/runner/index.ts"],"sourcesContent":["export function getLoadedMonaco(): typeof monaco {\n\tif (!monaco) {\n\t\tthrow new Error(\"monaco is not loaded yet\");\n\t}\n\treturn monaco;\n}\n\nexport function getMonaco(): typeof monaco | undefined {\n\treturn (window as any).monaco;\n}\n\nexport interface IMonacoSetup {\n\tloaderUrl: string;\n\tloaderConfigPaths: Record<string, string>;\n\tcodiconUrl: string;\n\tmonacoTypesUrl: string | undefined;\n}\n\nlet loadMonacoPromise: Promise<typeof monaco> | undefined;\nexport async function loadMonaco(\n\tsetup: IMonacoSetup = prodMonacoSetup\n): Promise<typeof monaco> {\n\tif (!loadMonacoPromise) {\n\t\tloadMonacoPromise = _loadMonaco(setup);\n\t}\n\treturn loadMonacoPromise;\n}\n\nasync function _loadMonaco(setup: IMonacoSetup): Promise<typeof monaco> {\n\tconst global = self as any;\n\n\tif (!(global as any).require) {\n\t\tawait loadScript(setup.loaderUrl);\n\t}\n\n\tglobal.AMD = true;\n\tglobal.getCodiconPath = () => {\n\t\treturn setup.codiconUrl;\n\t};\n\n\tconsole.log(\"LOADER CONFIG: \");\n\tconsole.log(JSON.stringify(setup.loaderConfigPaths, null, \"\\t\"));\n\n\t/** @type {any} */\n\tconst req = global.require as any;\n\treq.config({ paths: setup.loaderConfigPaths });\n\n\treturn new Promise((res) => {\n\t\t// First load editor.main. If it inlines the plugins, we don't want to try to load them from the server.\n\t\treq([\"vs/editor/editor.main\"], () => {\n\t\t\treq(\n\t\t\t\t[\n\t\t\t\t\t\"vs/basic-languages/monaco.contribution\",\n\t\t\t\t\t\"vs/language/css/monaco.contribution\",\n\t\t\t\t\t\"vs/language/html/monaco.contribution\",\n\t\t\t\t\t\"vs/language/json/monaco.contribution\",\n\t\t\t\t\t\"vs/language/typescript/monaco.contribution\",\n\t\t\t\t],\n\t\t\t\t() => {\n\t\t\t\t\tres(monaco);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t});\n}\n\nfunction loadScript(path: string): Promise<void> {\n\treturn new Promise((res) => {\n\t\tconst script = document.createElement(\"script\");\n\t\tscript.onload = () => res();\n\t\tscript.async = true;\n\t\tscript.type = \"text/javascript\";\n\t\tscript.src = path;\n\t\tdocument.head.appendChild(script);\n\t});\n}\n\nexport const prodMonacoSetup = getMonacoSetup(\n\t\"node_modules/monaco-editor/min/vs\"\n);\n\nexport function getMonacoSetup(corePath: string): IMonacoSetup {\n\tconst loaderConfigPaths = {\n\t\tvs: `${corePath}`,\n\t};\n\n\treturn {\n\t\tloaderUrl: `${corePath}/loader.js`,\n\t\tloaderConfigPaths,\n\t\tcodiconUrl: `${corePath}/base/browser/ui/codicons/codicon/codicon.ttf`,\n\t\tmonacoTypesUrl: undefined,\n\t};\n}\n","import { loadMonaco } from \"../monaco-loader\";\nimport { IMessage, IPreviewState } from \"../shared\";\nimport \"./style.scss\";\n\nwindow.addEventListener(\"message\", (event) => {\n\tconst e = event.data as IMessage | { kind: undefined };\n\tif (e.kind === \"initialize\") {\n\t\tinitialize(e.state);\n\t}\n});\n\nlet monacoPromise: Promise<any> | undefined = undefined;\n\nasync function initialize(state: IPreviewState) {\n\tif (monacoPromise) {\n\t\tthrow new Error(\"already initialized\");\n\t}\n\n\tconst loadingContainerDiv = document.createElement(\"div\");\n\tloadingContainerDiv.className = \"loader-container\";\n\tconst loadingDiv = document.createElement(\"div\");\n\tloadingDiv.className = \"loader\";\n\tloadingContainerDiv.appendChild(loadingDiv);\n\tdocument.body.appendChild(loadingContainerDiv);\n\n\tmonacoPromise = loadMonaco(state.monacoSetup);\n\tawait monacoPromise;\n\n\tloadingContainerDiv.remove();\n\n\tconst style = document.createElement(\"style\");\n\tstyle.innerHTML = state.css;\n\tdocument.body.appendChild(style);\n\n\tdocument.body.innerHTML += state.html;\n\n\ttry {\n\t\teval(state.js);\n\t} catch (err) {\n\t\tconst pre = document.createElement(\"pre\");\n\t\tpre.appendChild(document.createTextNode(`${err}`));\n\t\tdocument.body.insertBefore(pre, document.body.firstChild);\n\t}\n}\n"],"names":["loadMonacoPromise","getMonacoSetup","corePath","loaderUrl","loaderConfigPaths","vs","codiconUrl","monacoTypesUrl","undefined","monaco","Error","window","async","setup","prodMonacoSetup","global","self","path","require","Promise","res","script","document","createElement","onload","type","src","head","appendChild","AMD","getCodiconPath","console","log","JSON","stringify","req","config","paths","_loadMonaco","monacoPromise","initialize","state","loadingContainerDiv","className","loadingDiv","body","loadMonaco","monacoSetup","remove","style","innerHTML","css","html","eval","js","err","pre","createTextNode","insertBefore","firstChild","addEventListener","event","e","data","kind"],"sourceRoot":""}